<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/COMMIT_MESSAGE.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/COMMIT_MESSAGE.txt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/App.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/App.jsx" />
              <option name="originalContent" value="import React, { useEffect, useState } from 'react';&#10;import { Routes, Route } from 'react-router-dom';&#10;import { Toaster } from 'react-hot-toast';&#10;import { SignIn, SignUp, useAuth } from '@clerk/clerk-react';&#10;import Home from './Home';&#10;import Login from './components/Login';&#10;import Signup from './components/Signup';&#10;import PrivateRoute from './components/PrivateRoute';&#10;import RequireAdmin from './components/auth/RequireAdmin';&#10;import AdminDashboard from './components/AdminDashboard';&#10;import Error404 from './components/Error404';&#10;import Navbar from './components/Navbar';&#10;import Footer from './components/Footer';&#10;import ScrollToTop from './components/ScrollToTop';&#10;&#10;import About from './Pages/About';&#10;import Privacy from './Pages/Privacy';&#10;import Terms from './Pages/Terms';&#10;import Contact from './Pages/Contact';&#10;import ReportIssue from './Pages/ReportIssue';&#10;import ServerError from './components/ServerError';&#10;import DownloadAndroid from './Pages/DownloadAndroid';&#10;import DownloadIOS from './Pages/DownloadIOS';&#10;import NewIssue from './Pages/NewIssue';&#10;import IssueDetail from './Pages/IssueDetail';&#10;import UserDashboard from './Pages/UserDashboard';&#10;import CommunityVotingPage from './Pages/CommunityVotingPage';&#10;import Profile from './Pages/Profile';&#10;import Resources from './Pages/Resources';&#10;import MyComplaints from './Pages/MyComplaints';&#10;import CivicEducation from './Pages/CivicEducation';&#10;import CivicSimulator from './Pages/CivicSimulator';&#10;import Contributors from './Pages/Contributors';&#10;import ScrollToTopOnRouteChange from './components/ScrollToTopOnRouteChange';&#10;&#10;const App = () =&gt; {&#10;  const { isSignedIn } = useAuth();&#10;  // Only show Navbar if user is NOT signed in&#10;  // Only show Navbar if user is NOT signed in&#10;      &lt;ScrollToTop /&gt;&#10;      &lt;ScrollToTopOnRouteChange/&gt;&#10;      &lt;Toaster&#10;        position=&quot;top-right&quot;&#10;        toastOptions={{&#10;          className:&#10;            '!bg-white dark:!bg-gray-800 !text-gray-900 dark:!text-white !border !border-gray-200 dark:!border-gray-700',&#10;          duration: 4000,&#10;          success: {&#10;            iconTheme: { primary: '#10B981', secondary: 'white' },&#10;          },&#10;          error: {&#10;            iconTheme: { primary: '#EF4444', secondary: 'white' },&#10;          },&#10;        }}&#10;      /&gt;&#10;          &#10;      &lt;Navbar/&gt;&#10;&#10;      &lt;main className=&quot;min-h-screen&quot;&gt;&#10;        &lt;Routes&gt;&#10;          {/* Clerk Auth Routes */}&#10;        &lt;Routes&gt;&#10;          {/* Clerk Auth Routes */}&#10;          &lt;Route&#10;            path=&quot;/sign-in/*&quot;&#10;            element={&lt;SignIn routing=&quot;path&quot; path=&quot;/sign-in&quot; redirectUrl=&quot;/&quot; /&gt;}&#10;          /&gt;&#10;          &lt;Route&#10;            path=&quot;/signup/*&quot;&#10;            element={&lt;SignUp routing=&quot;path&quot; path=&quot;/signup&quot; redirectUrl=&quot;/&quot; /&gt;}&#10;          /&gt;&#10;          &lt;Route path=&quot;/about&quot; element={&lt;About /&gt;} /&gt;&#10;          {/* Public Routes */}&#10;          &lt;Route path=&quot;/&quot; element={&lt;Home /&gt;} /&gt;&#10;          &lt;Route path=&quot;/about&quot; element={&lt;About /&gt;} /&gt;&#10;          &lt;Route path=&quot;/privacy&quot; element={&lt;Privacy /&gt;} /&gt;&#10;          &lt;Route path=&quot;/terms&quot; element={&lt;Terms /&gt;} /&gt;&#10;          &lt;Route path=&quot;/contact&quot; element={&lt;Contact /&gt;} /&gt;&#10;          &lt;Route path=&quot;/login&quot; element={&lt;Login /&gt;} /&gt;&#10;          &lt;Route path=&quot;/signup&quot; element={&lt;Signup /&gt;} /&gt;&#10;          &lt;Route path=&quot;/report-issue&quot; element={&lt;ReportIssue /&gt;} /&gt;&#10;          &lt;Route path=&quot;/download-android&quot; element={&lt;DownloadAndroid /&gt;} /&gt;&#10;          &lt;Route path=&quot;/download-ios&quot; element={&lt;DownloadIOS /&gt;} /&gt;&#10;          &lt;Route path=&quot;/issues/new&quot; element={&lt;NewIssue /&gt;} /&gt;&#10;          &lt;Route path=&quot;/issues/:id&quot; element={&lt;IssueDetail /&gt;} /&gt;&#10;          &lt;Route path=&quot;/civic-education&quot; element={&lt;CivicEducation /&gt;} /&gt;&#10;          &lt;Route path=&quot;/civic-simulator&quot; element={&lt;CivicSimulator /&gt;} /&gt;&#10;          &lt;Route path=&quot;/community-voting&quot; element={&lt;CommunityVotingPage /&gt;} /&gt;&#10;          &lt;Route path=&quot;/profile&quot; element={&lt;Profile /&gt;} /&gt;&#10;          &lt;Route path=&quot;/resources&quot; element={&lt;Resources /&gt;} /&gt;&#10;          &lt;Route path=&quot;/complaints&quot; element={&lt;MyComplaints /&gt;} /&gt;&#10;          &lt;Route path=&quot;/contributors&quot; element={&lt;Contributors /&gt;} /&gt;&#10;            path=&quot;/admin&quot;&#10;          {/* Protected Routes */}&#10;          &lt;Route&#10;            path=&quot;/admin&quot;&#10;            element={&#10;              &lt;RequireAdmin&gt;&#10;                &lt;AdminDashboard /&gt;&#10;              &lt;/RequireAdmin&gt;&#10;            }&#10;          /&gt;&#10;          &lt;Route&#10;            path=&quot;/admin/dashboard&quot;&#10;            element={&#10;              &lt;PrivateRoute allowedRoles={['admin']}&gt;&#10;                &lt;AdminDashboard /&gt;&#10;              &lt;/PrivateRoute&gt;&#10;            }&#10;          /&gt;&#10;          &lt;Route&#10;            path=&quot;/home&quot;&#10;            element={&#10;              &lt;PrivateRoute allowedRoles={['user', 'admin']}&gt;&#10;                &lt;Home /&gt;&#10;              &lt;/PrivateRoute&gt;&#10;            }&#10;          /&gt;&#10;          &lt;Route&#10;            path=&quot;/user/dashboard&quot;&#10;            element={&#10;              &lt;PrivateRoute allowedRoles={['user', 'admin']}&gt;&#10;                &lt;UserDashboard /&gt;&#10;              &lt;/PrivateRoute&gt;&#10;            }&#10;          /&gt;&#10;          &lt;Route path=&quot;*&quot; element={&lt;Error404 /&gt;} /&gt;&#10;          {/* Errors */}&#10;          &lt;Route path=&quot;/500&quot; element={&lt;ServerError /&gt;} /&gt;&#10;          &lt;Route path=&quot;*&quot; element={&lt;Error404 /&gt;} /&gt;&#10;        &lt;/Routes&gt;&#10;  );&#10;};&#10;&#10;export default App;&#10;// import ChatBot from './components/Chatbot';&#10;&#10;// // Add this to your Layout component's return statement&#10;// function Layout({ children }) {&#10;//   return (&#10;//     &lt;div className=&quot;relative min-h-screen&quot;&gt;&#10;//       {/* Your existing layout code */}&#10;//       {children}&#10;      &#10;//       {/* Add the ChatBot component at the end */}&#10;//       &lt;ChatBot /&gt;&#10;//     &lt;/div&gt;&#10;//   );&#10;// }&#10;" />
              <option name="updatedContent" value="import React, { useEffect, useState } from 'react';&#13;&#10;import { Routes, Route, useLocation } from 'react-router-dom';&#13;&#10;import { Toaster } from 'react-hot-toast';&#13;&#10;import { SignIn, SignUp, useAuth } from '@clerk/clerk-react';&#13;&#10;import { AnimatePresence } from 'framer-motion';&#13;&#10;&#13;&#10;import Home from './Home';&#13;&#10;import Login from './components/Login';&#13;&#10;import Signup from './components/Signup';&#13;&#10;import PrivateRoute from './components/PrivateRoute';&#13;&#10;import RequireAdmin from './components/auth/RequireAdmin';&#13;&#10;import AdminDashboard from './components/AdminDashboard';&#13;&#10;import Error404 from './components/Error404';&#13;&#10;import Navbar from './components/Navbar';&#13;&#10;import Footer from './components/Footer';&#13;&#10;import ScrollToTop from './components/ScrollToTop';&#13;&#10;&#13;&#10;import About from './Pages/About';&#13;&#10;import Privacy from './Pages/Privacy';&#13;&#10;import Terms from './Pages/Terms';&#13;&#10;import Contact from './Pages/Contact';&#13;&#10;import ReportIssue from './Pages/ReportIssue';&#13;&#10;import ServerError from './components/ServerError';&#13;&#10;import DownloadAndroid from './Pages/DownloadAndroid';&#13;&#10;import DownloadIOS from './Pages/DownloadIOS';&#13;&#10;import NewIssue from './Pages/NewIssue';&#13;&#10;import IssueDetail from './Pages/IssueDetail';&#13;&#10;import UserDashboard from './Pages/UserDashboard';&#13;&#10;import CommunityVotingPage from './Pages/CommunityVotingPage';&#13;&#10;import Profile from './Pages/Profile';&#13;&#10;import Resources from './Pages/Resources';&#13;&#10;import MyComplaints from './Pages/MyComplaints';&#13;&#10;import CivicEducation from './Pages/CivicEducation';&#13;&#10;import CivicSimulator from './Pages/CivicSimulator';&#13;&#10;import Contributors from './Pages/Contributors';&#13;&#10;import ScrollToTopOnRouteChange from './components/ScrollToTopOnRouteChange';&#13;&#10;&#13;&#10;const App = () =&gt; {&#13;&#10;  const { isSignedIn } = useAuth();&#13;&#10;  const location = useLocation();&#13;&#10;  &#13;&#10;  return (&#13;&#10;    &lt;&gt;&#13;&#10;      &lt;ScrollToTop /&gt;&#13;&#10;      &lt;ScrollToTopOnRouteChange/&gt;&#13;&#10;      &lt;Toaster&#13;&#10;        position=&quot;top-right&quot;&#13;&#10;        toastOptions={{&#13;&#10;          className:&#13;&#10;            '!bg-white dark:!bg-gray-800 !text-gray-900 dark:!text-white !border !border-gray-200 dark:!border-gray-700',&#13;&#10;          duration: 4000,&#13;&#10;          success: {&#13;&#10;            iconTheme: { primary: '#10B981', secondary: 'white' },&#13;&#10;          },&#13;&#10;          error: {&#13;&#10;            iconTheme: { primary: '#EF4444', secondary: 'white' },&#13;&#10;          },&#13;&#10;        }}&#13;&#10;      /&gt;&#13;&#10;          &#13;&#10;      &lt;Navbar/&gt;&#13;&#10;&#13;&#10;      &lt;main className=&quot;min-h-screen&quot;&gt;&#13;&#10;        &lt;AnimatePresence mode=&quot;wait&quot; initial={false}&gt;&#13;&#10;          &lt;Routes location={location} key={location.pathname}&gt;&#13;&#10;            {/* Clerk Auth Routes */}&#13;&#10;            &lt;Route&#13;&#10;              path=&quot;/sign-in/*&quot;&#13;&#10;              element={&lt;SignIn routing=&quot;path&quot; path=&quot;/sign-in&quot; redirectUrl=&quot;/&quot; /&gt;}&#13;&#10;            /&gt;&#13;&#10;            &lt;Route&#13;&#10;              path=&quot;/signup/*&quot;&#13;&#10;              element={&lt;SignUp routing=&quot;path&quot; path=&quot;/signup&quot; redirectUrl=&quot;/&quot; /&gt;}&#13;&#10;            /&gt;&#13;&#10;&#13;&#10;            {/* Public Routes */}&#13;&#10;            &lt;Route path=&quot;/&quot; element={&lt;Home /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/about&quot; element={&lt;About /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/privacy&quot; element={&lt;Privacy /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/terms&quot; element={&lt;Terms /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/contact&quot; element={&lt;Contact /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/login&quot; element={&lt;Login /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/signup&quot; element={&lt;Signup /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/report-issue&quot; element={&lt;ReportIssue /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/download-android&quot; element={&lt;DownloadAndroid /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/download-ios&quot; element={&lt;DownloadIOS /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/issues/new&quot; element={&lt;NewIssue /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/issues/:id&quot; element={&lt;IssueDetail /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/civic-education&quot; element={&lt;CivicEducation /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/civic-simulator&quot; element={&lt;CivicSimulator /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/community-voting&quot; element={&lt;CommunityVotingPage /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/profile&quot; element={&lt;Profile /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/resources&quot; element={&lt;Resources /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/complaints&quot; element={&lt;MyComplaints /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/contributors&quot; element={&lt;Contributors /&gt;} /&gt;&#13;&#10;&#13;&#10;            {/* Protected Routes */}&#13;&#10;            &lt;Route&#13;&#10;              path=&quot;/admin&quot;&#13;&#10;              element={&#13;&#10;                &lt;RequireAdmin&gt;&#13;&#10;                  &lt;AdminDashboard /&gt;&#13;&#10;                &lt;/RequireAdmin&gt;&#13;&#10;              }&#13;&#10;            /&gt;&#13;&#10;            &lt;Route&#13;&#10;              path=&quot;/admin/dashboard&quot;&#13;&#10;              element={&#13;&#10;                &lt;PrivateRoute allowedRoles={['admin']}&gt;&#13;&#10;                  &lt;AdminDashboard /&gt;&#13;&#10;                &lt;/PrivateRoute&gt;&#13;&#10;              }&#13;&#10;            /&gt;&#13;&#10;            &lt;Route&#13;&#10;              path=&quot;/home&quot;&#13;&#10;              element={&#13;&#10;                &lt;PrivateRoute allowedRoles={['user', 'admin']}&gt;&#13;&#10;                  &lt;Home /&gt;&#13;&#10;                &lt;/PrivateRoute&gt;&#13;&#10;              }&#13;&#10;            /&gt;&#13;&#10;            &lt;Route&#13;&#10;              path=&quot;/user/dashboard&quot;&#13;&#10;              element={&#13;&#10;                &lt;PrivateRoute allowedRoles={['user', 'admin']}&gt;&#13;&#10;                  &lt;UserDashboard /&gt;&#13;&#10;                &lt;/PrivateRoute&gt;&#13;&#10;              }&#13;&#10;            /&gt;&#13;&#10;&#13;&#10;            {/* Errors */}&#13;&#10;            &lt;Route path=&quot;/500&quot; element={&lt;ServerError /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;*&quot; element={&lt;Error404 /&gt;} /&gt;&#13;&#10;          &lt;/Routes&gt;&#13;&#10;        &lt;/AnimatePresence&gt;&#13;&#10;      &lt;/main&gt;&#13;&#10;&#13;&#10;      &lt;Footer /&gt;&#13;&#10;    &lt;/&gt;&#13;&#10;  );&#13;&#10;};&#13;&#10;&#13;&#10;export default App;&#13;&#10;// import ChatBot from './components/Chatbot';&#13;&#10;&#13;&#10;// // Add this to your Layout component's return statement&#13;&#10;// function Layout({ children }) {&#13;&#10;//   return (&#13;&#10;//     &lt;div className=&quot;relative min-h-screen&quot;&gt;&#13;&#10;//       {/* Your existing layout code */}&#13;&#10;//       {children}&#13;&#10;      &#13;&#10;//       {/* Add the ChatBot component at the end */}&#13;&#10;//       &lt;ChatBot /&gt;&#13;&#10;//     &lt;/div&gt;&#13;&#10;//   );&#13;&#10;// }" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Pages/CommunityVoting.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Pages/CommunityVoting.css" />
              <option name="originalContent" value=".community-voting-container {&#10;  max-width: 800px;&#10;  margin: 0 auto;&#10;  padding: 20px;&#10;  font-family: Arial, sans-serif;&#10;  color: #111;&#10;  background-color: #fff;&#10;}&#10;&#10;.back-button {&#10;  background: none;&#10;  border: none;&#10;  color: #10b981;&#10;  cursor: pointer;&#10;  font-size: 16px;&#10;  margin-bottom: 20px;&#10;}&#10;&#10;.filter-bar {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  background: #f3f4f6;&#10;  padding: 15px;&#10;  border-radius: 50px;&#10;  margin: 20px 0;&#10;  flex-wrap: wrap;&#10;}&#10;&#10;body.dark .filter-bar {&#10;  background: #1f2937;&#10;}&#10;&#10;.filter-section {&#10;  display: flex;&#10;  align-items: center;&#10;  margin: 5px 10px;&#10;}&#10;&#10;.filter-section label {&#10;  margin-right: 10px;&#10;  font-weight: bold;&#10;}&#10;&#10;.filter-dropdown {&#10;  padding: 8px 12px;&#10;  border-radius: 20px;&#10;  border: 1px solid #d1d5db;&#10;  background: white;&#10;}&#10;&#10;.issues-list {&#10;  margin-top: 30px;&#10;}&#10;&#10;.issue-card {&#10;  background: white;&#10;  border-radius: 10px;&#10;  padding: 20px;&#10;  margin-bottom: 20px;&#10;  box-shadow: 0 2px 5px rgba(0,0,0,0.1);&#10;}&#10;&#10;.issue-header {&#10;  display: flex;&#10;  justify-content: space-between;&#10;  align-items: center;&#10;  margin-bottom: 15px;&#10;}&#10;&#10;.area-badge {&#10;  background: #e5e7eb;&#10;  padding: 5px 10px;&#10;  border-radius: 15px;&#10;  font-size: 14px;&#10;}&#10;&#10;.issue-metrics {&#10;  display: flex;&#10;  gap: 20px;&#10;  margin-bottom: 15px;&#10;}&#10;&#10;.metric {&#10;  display: flex;&#10;  flex-direction: column;&#10;}&#10;&#10;.metric-label {&#10;  font-size: 12px;&#10;  color: #6b7280;&#10;}&#10;&#10;.metric-value {&#10;  font-weight: bold;&#10;  font-size: 16px;&#10;}&#10;&#10;.vote-section {&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 15px;&#10;}&#10;&#10;.vote-button {&#10;  background: #10b981;&#10;  color: white;&#10;  border: none;&#10;  padding: 8px 15px;&#10;  border-radius: 20px;&#10;  cursor: pointer;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 5px;&#10;}&#10;&#10;.progress-bar {&#10;  flex-grow: 1;&#10;  height: 8px;&#10;  background: #e5e7eb;&#10;  border-radius: 4px;&#10;  overflow: hidden;&#10;}&#10;&#10;.progress-fill {&#10;  height: 100%;&#10;  background: #10b981;&#10;  border-radius: 4px;&#10;  transition: width 0.3s ease;&#10;}&#10;&#10;@media (max-width: 600px) {&#10;  .filter-bar {&#10;    flex-direction: column;&#10;    border-radius: 15px;&#10;  }&#10;&#10;  .issue-metrics {&#10;    flex-direction: column;&#10;    gap: 10px;&#10;  }&#10;}" />
              <option name="updatedContent" value=".community-voting-container {&#13;&#10;  max-width: 800px;&#13;&#10;  margin: 0 auto;&#13;&#10;  padding: 20px;&#13;&#10;  font-family: Arial, sans-serif;&#13;&#10;  color: #111;&#13;&#10;  background-color: #fff;&#13;&#10;  transition: background-color 0.3s ease, color 0.3s ease;&#13;&#10;}&#13;&#10;&#13;&#10;/* Dark mode for main container */&#13;&#10;:root.dark .community-voting-container {&#13;&#10;  background-color: #0d131f;&#13;&#10;  color: #f3f4f6;&#13;&#10;}&#13;&#10;&#13;&#10;.back-button {&#13;&#10;  background: none;&#13;&#10;  border: none;&#13;&#10;  color: #10b981;&#13;&#10;  cursor: pointer;&#13;&#10;  font-size: 16px;&#13;&#10;  margin-bottom: 20px;&#13;&#10;  transition: color 0.3s ease;&#13;&#10;}&#13;&#10;&#13;&#10;:root.dark .back-button {&#13;&#10;  color: #34d399;&#13;&#10;}&#13;&#10;&#13;&#10;.filter-bar {&#13;&#10;  display: flex;&#13;&#10;  justify-content: space-between;&#13;&#10;  background: #f3f4f6;&#13;&#10;  padding: 15px;&#13;&#10;  border-radius: 50px;&#13;&#10;  margin: 20px 0;&#13;&#10;  flex-wrap: wrap;&#13;&#10;  transition: background-color 0.3s ease;&#13;&#10;}&#13;&#10;&#13;&#10;:root.dark .filter-bar {&#13;&#10;  background: #1f2937;&#13;&#10;}&#13;&#10;&#13;&#10;.filter-section {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  margin: 5px 10px;&#13;&#10;}&#13;&#10;&#13;&#10;.filter-section label {&#13;&#10;  margin-right: 10px;&#13;&#10;  font-weight: bold;&#13;&#10;  transition: color 0.3s ease;&#13;&#10;}&#13;&#10;&#13;&#10;:root.dark .filter-section label {&#13;&#10;  color: #e5e7eb;&#13;&#10;}&#13;&#10;&#13;&#10;.filter-dropdown {&#13;&#10;  padding: 8px 12px;&#13;&#10;  border-radius: 20px;&#13;&#10;  border: 1px solid #d1d5db;&#13;&#10;  background: white;&#13;&#10;  color: #111;&#13;&#10;  transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;&#13;&#10;}&#13;&#10;&#13;&#10;:root.dark .filter-dropdown {&#13;&#10;  background: #374151;&#13;&#10;  color: #f3f4f6;&#13;&#10;  border-color: #4b5563;&#13;&#10;}&#13;&#10;&#13;&#10;:root.dark .filter-dropdown option {&#13;&#10;  background: #374151;&#13;&#10;  color: #f3f4f6;&#13;&#10;}&#13;&#10;&#13;&#10;.issues-list {&#13;&#10;  margin-top: 30px;&#13;&#10;}&#13;&#10;&#13;&#10;.issue-card {&#13;&#10;  background: white;&#13;&#10;  border-radius: 10px;&#13;&#10;  padding: 20px;&#13;&#10;  margin-bottom: 20px;&#13;&#10;  box-shadow: 0 2px 5px rgba(0,0,0,0.1);&#13;&#10;  transition: background-color 0.3s ease, box-shadow 0.3s ease;&#13;&#10;}&#13;&#10;&#13;&#10;:root.dark .issue-card {&#13;&#10;  background: #1f2937;&#13;&#10;  box-shadow: 0 2px 5px rgba(0,0,0,0.3);&#13;&#10;}&#13;&#10;&#13;&#10;.issue-header {&#13;&#10;  display: flex;&#13;&#10;  justify-content: space-between;&#13;&#10;  align-items: center;&#13;&#10;  margin-bottom: 15px;&#13;&#10;}&#13;&#10;&#13;&#10;:root.dark .issue-header h3 {&#13;&#10;  color: #f3f4f6;&#13;&#10;}&#13;&#10;&#13;&#10;.area-badge {&#13;&#10;  background: #e5e7eb;&#13;&#10;  padding: 5px 10px;&#13;&#10;  border-radius: 15px;&#13;&#10;  font-size: 14px;&#13;&#10;  color: #374151;&#13;&#10;  transition: background-color 0.3s ease, color 0.3s ease;&#13;&#10;}&#13;&#10;&#13;&#10;:root.dark .area-badge {&#13;&#10;  background: #374151;&#13;&#10;  color: #e5e7eb;&#13;&#10;}&#13;&#10;&#13;&#10;.issue-metrics {&#13;&#10;  display: flex;&#13;&#10;  gap: 20px;&#13;&#10;  margin-bottom: 15px;&#13;&#10;}&#13;&#10;&#13;&#10;.metric {&#13;&#10;  display: flex;&#13;&#10;  flex-direction: column;&#13;&#10;}&#13;&#10;&#13;&#10;.metric-label {&#13;&#10;  font-size: 12px;&#13;&#10;  color: #6b7280;&#13;&#10;  transition: color 0.3s ease;&#13;&#10;}&#13;&#10;&#13;&#10;:root.dark .metric-label {&#13;&#10;  color: #9ca3af;&#13;&#10;}&#13;&#10;&#13;&#10;.metric-value {&#13;&#10;  font-weight: bold;&#13;&#10;  font-size: 16px;&#13;&#10;  transition: color 0.3s ease;&#13;&#10;}&#13;&#10;&#13;&#10;:root.dark .metric-value {&#13;&#10;  color: #f3f4f6;&#13;&#10;}&#13;&#10;&#13;&#10;.vote-section {&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: 15px;&#13;&#10;}&#13;&#10;&#13;&#10;.vote-button {&#13;&#10;  background: #10b981;&#13;&#10;  color: white;&#13;&#10;  border: none;&#13;&#10;  padding: 8px 15px;&#13;&#10;  border-radius: 20px;&#13;&#10;  cursor: pointer;&#13;&#10;  display: flex;&#13;&#10;  align-items: center;&#13;&#10;  gap: 5px;&#13;&#10;  transition: background-color 0.3s ease;&#13;&#10;}&#13;&#10;&#13;&#10;:root.dark .vote-button {&#13;&#10;  background: #059669;&#13;&#10;}&#13;&#10;&#13;&#10;.vote-button:hover {&#13;&#10;  background: #059669;&#13;&#10;}&#13;&#10;&#13;&#10;:root.dark .vote-button:hover {&#13;&#10;  background: #047857;&#13;&#10;}&#13;&#10;&#13;&#10;.progress-bar {&#13;&#10;  flex-grow: 1;&#13;&#10;  height: 8px;&#13;&#10;  background: #e5e7eb;&#13;&#10;  border-radius: 4px;&#13;&#10;  overflow: hidden;&#13;&#10;  transition: background-color 0.3s ease;&#13;&#10;}&#13;&#10;&#13;&#10;:root.dark .progress-bar {&#13;&#10;  background: #374151;&#13;&#10;}&#13;&#10;&#13;&#10;.progress-fill {&#13;&#10;  height: 100%;&#13;&#10;  background: #10b981;&#13;&#10;  border-radius: 4px;&#13;&#10;  transition: width 0.3s ease, background-color 0.3s ease;&#13;&#10;}&#13;&#10;&#13;&#10;:root.dark .progress-fill {&#13;&#10;  background: #34d399;&#13;&#10;}&#13;&#10;&#13;&#10;/* Page heading styles for dark mode */&#13;&#10;:root.dark .community-voting-container h1 {&#13;&#10;  color: #f3f4f6;&#13;&#10;}&#13;&#10;&#13;&#10;:root.dark .community-voting-container p {&#13;&#10;  color: #d1d5db;&#13;&#10;}&#13;&#10;&#13;&#10;@media (max-width: 600px) {&#13;&#10;  .filter-bar {&#13;&#10;    flex-direction: column;&#13;&#10;    border-radius: 15px;&#13;&#10;  }&#13;&#10;&#13;&#10;  .issue-metrics {&#13;&#10;    flex-direction: column;&#13;&#10;    gap: 10px;&#13;&#10;  }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/AdminDashboard.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/AdminDashboard.jsx" />
              <option name="originalContent" value="import React, { useEffect, useState } from 'react';&#10;import { useNavigate } from 'react-router-dom';&#10;mimport { motion } from 'framer-motion';&#10;import { toast, ToastContainer } from 'react-toastify';&#10;&#10;const AdminDashboard = () =&gt; {&#10;  const navigate = useNavigate();&#10;  const [issues, setIssues] = useState([]);&#10;&#10;  // Animation variants for the page container&#10;  const pageVariants = {&#10;    initial: { opacity: 0, y: 20 },&#10;    animate: {&#10;      opacity: 1,&#10;      y: 0,&#10;      transition: {&#10;        duration: 0.6,&#10;        ease: &quot;easeOut&quot;,&#10;        staggerChildren: 0.1&#10;      }&#10;    },&#10;    exit: {&#10;      opacity: 0,&#10;      y: -20,&#10;      transition: { duration: 0.4 }&#10;    }&#10;  };&#10;&#10;  // Animation variants for table rows&#10;  const rowVariants = {&#10;    initial: { opacity: 0, x: -20 },&#10;    animate: {&#10;      opacity: 1,&#10;      x: 0,&#10;      transition: { duration: 0.4 }&#10;    }&#10;  };&#10;&#10;  // Fetch all reported issues&#10;  const fetchIssues = React.useCallback(async () =&gt; {&#10;    try {&#10;      const token = localStorage.getItem('token');&#10;      const res = await fetch('http://localhost:5001/api/issues', {&#10;        headers: {&#10;          Authorization: `Bearer ${token}`,&#10;        },&#10;      });&#10;&#10;      if (!res.ok) {&#10;        throw new Error('Unauthorized or failed to fetch');&#10;      }&#10;&#10;      const data = await res.json();&#10;      setIssues(data);&#10;    } catch (error) {&#10;      console.error('Error fetching issues:', error);&#10;      alert('Failed to fetch issues. Please login again.');&#10;      navigate('/login');&#10;    }&#10;  }, [navigate]);&#10;&#10;  // Update issue status&#10;  const handleStatusChange = async (id, status) =&gt; {&#10;    try {&#10;      const token = localStorage.getItem('token');&#10;      const res = await fetch(`http://localhost:5001/api/issues/${id}/status`, {&#10;        method: 'PATCH',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;          Authorization: `Bearer ${token}`,&#10;        },&#10;        body: JSON.stringify({ status }),&#10;      });&#10;&#10;      if (!res.ok) {&#10;        throw new Error('Failed to update status');&#10;      }&#10;&#10;      // Refresh issue list&#10;      fetchIssues();&#10;    } catch (error) {&#10;      console.error('Error updating status:', error);&#10;      alert('Could not update status.');&#10;    }&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    fetchIssues();&#10;  }, [fetchIssues]);&#10;&#10;  return (&#10;    &lt;motion.div&#10;      className=&quot;min-h-screen bg-gray-50&quot;&#10;      variants={pageVariants}&#10;      initial=&quot;initial&quot;&#10;      animate=&quot;animate&quot;&#10;      exit=&quot;exit&quot;&#10;    &gt;&#10;      {/* Issues Table */}&#10;      &lt;main className=&quot;p-6&quot;&gt;&#10;        &lt;motion.h2&#10;          className=&quot;text-xl font-bold mb-4&quot;&#10;          initial={{ opacity: 0, y: -20 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          transition={{ duration: 0.6, delay: 0.1 }}&#10;        &gt;&#10;          Admin Dashboard&#10;        &lt;/motion.h2&gt;&#10;        &lt;motion.p&#10;          initial={{ opacity: 0, y: -10 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          transition={{ duration: 0.6, delay: 0.2 }}&#10;        &gt;&#10;          Welcome, Admin! You have access to admin controls.&#10;        &lt;/motion.p&gt;&#10;        &lt;ToastContainer&#10;          position=&quot;top-right&quot;&#10;          autoClose={3000}&#10;          closeOnClick&#10;          pauseOnHover&#10;          draggable&#10;          theme=&quot;dark&quot;&#10;          toastClassName=&quot;toast-body custom-toast-shadow&quot;&#10;          bodyClassName=&quot;text-sm font-medium&quot;&#10;        /&gt;&#10;        &lt;motion.h3&#10;          className=&quot;text-lg font-semibold mb-4&quot;&#10;          initial={{ opacity: 0, y: -10 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          transition={{ duration: 0.6, delay: 0.3 }}&#10;        &gt;&#10;          Reported Issues&#10;        &lt;/motion.h3&gt;&#10;&#10;        {issues.length === 0 ? (&#10;          &lt;motion.p&#10;            initial={{ opacity: 0 }}&#10;            animate={{ opacity: 1 }}&#10;            transition={{ duration: 0.6, delay: 0.4 }}&#10;          &gt;&#10;            No issues found.&#10;          &lt;/motion.p&gt;&#10;        ) : (&#10;          &lt;motion.div&#10;            className=&quot;overflow-x-auto&quot;&#10;            initial={{ opacity: 0, y: 20 }}&#10;            animate={{ opacity: 1, y: 0 }}&#10;            transition={{ duration: 0.6, delay: 0.4 }}&#10;          &gt;&#10;            &lt;table className=&quot;min-w-full border border-gray-300 bg-white text-sm rounded-lg overflow-hidden shadow&quot;&gt;&#10;              &lt;thead className=&quot;bg-gray-200 text-gray-700&quot;&gt;&#10;                &lt;motion.tr&#10;                  initial={{ opacity: 0 }}&#10;                  animate={{ opacity: 1 }}&#10;                  transition={{ duration: 0.5, delay: 0.5 }}&#10;                &gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Title&lt;/th&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Description&lt;/th&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Phone&lt;/th&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Email&lt;/th&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Status&lt;/th&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Change Status&lt;/th&gt;&#10;                &lt;/motion.tr&gt;&#10;              &lt;/thead&gt;&#10;              &lt;tbody&gt;&#10;                {issues.map((issue, index) =&gt; (&#10;                  &lt;motion.tr&#10;                    key={issue._id}&#10;                    className=&quot;border-t border-gray-200&quot;&#10;                    variants={rowVariants}&#10;                    initial=&quot;initial&quot;&#10;                    animate=&quot;animate&quot;&#10;                    transition={{ delay: 0.6 + (index * 0.1) }}&#10;                  &gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.title}&lt;/td&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.description}&lt;/td&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.phone}&lt;/td&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.email}&lt;/td&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.status || 'Pending'}&lt;/td&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;&#10;                      &lt;select&#10;                        value={issue.status || 'Pending'}&#10;                        onChange={(e) =&gt; handleStatusChange(issue._id, e.target.value)}&#10;                        className=&quot;border border-gray-300 rounded px-2 py-1&quot;&#10;                      &gt;&#10;                        &lt;option&gt;Pending&lt;/option&gt;&#10;                        &lt;option&gt;In Progress&lt;/option&gt;&#10;                        &lt;option&gt;Resolved&lt;/option&gt;&#10;                        &lt;option&gt;Rejected&lt;/option&gt;&#10;                      &lt;/select&gt;&#10;                    &lt;/td&gt;&#10;                  &lt;/motion.tr&gt;&#10;                ))}&#10;              &lt;/tbody&gt;&#10;            &lt;/table&gt;&#10;          &lt;/motion.div&gt;&#10;        )}&#10;      &lt;/main&gt;&#10;    &lt;/motion.div&gt;&#10;  );&#10;};&#10;&#10;export default AdminDashboard;&#10;" />
              <option name="updatedContent" value="import React, { useEffect, useState } from 'react';&#10;import { useNavigate } from 'react-router-dom';&#10;import { motion } from 'framer-motion';&#10;import { toast, ToastContainer } from 'react-toastify';&#10;&#10;const AdminDashboard = () =&gt; {&#10;  const navigate = useNavigate();&#10;  const [issues, setIssues] = useState([]);&#10;&#10;  // Animation variants for the page container&#10;  const pageVariants = {&#10;    initial: { opacity: 0, y: 20 },&#10;    animate: {&#10;      opacity: 1,&#10;      y: 0,&#10;      transition: {&#10;        duration: 0.6,&#10;        ease: &quot;easeOut&quot;,&#10;        staggerChildren: 0.1&#10;      }&#10;    },&#10;    exit: {&#10;      opacity: 0,&#10;      y: -20,&#10;      transition: { duration: 0.4 }&#10;    }&#10;  };&#10;&#10;  // Animation variants for table rows&#10;  const rowVariants = {&#10;    initial: { opacity: 0, x: -20 },&#10;    animate: {&#10;      opacity: 1,&#10;      x: 0,&#10;      transition: { duration: 0.4 }&#10;    }&#10;  };&#10;&#10;  // Fetch all reported issues&#10;  const fetchIssues = React.useCallback(async () =&gt; {&#10;    try {&#10;      const token = localStorage.getItem('token');&#10;      const res = await fetch('http://localhost:5001/api/issues', {&#10;        headers: {&#10;          Authorization: `Bearer ${token}`,&#10;        },&#10;      });&#10;&#10;      if (!res.ok) {&#10;        throw new Error('Unauthorized or failed to fetch');&#10;      }&#10;&#10;      const data = await res.json();&#10;      setIssues(data);&#10;    } catch (error) {&#10;      console.error('Error fetching issues:', error);&#10;      alert('Failed to fetch issues. Please login again.');&#10;      navigate('/login');&#10;    }&#10;  }, [navigate]);&#10;&#10;  // Update issue status&#10;  const handleStatusChange = async (id, status) =&gt; {&#10;    try {&#10;      const token = localStorage.getItem('token');&#10;      const res = await fetch(`http://localhost:5001/api/issues/${id}/status`, {&#10;        method: 'PATCH',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;          Authorization: `Bearer ${token}`,&#10;        },&#10;        body: JSON.stringify({ status }),&#10;      });&#10;&#10;      if (!res.ok) {&#10;        throw new Error('Failed to update status');&#10;      }&#10;&#10;      // Refresh issue list&#10;      fetchIssues();&#10;    } catch (error) {&#10;      console.error('Error updating status:', error);&#10;      alert('Could not update status.');&#10;    }&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    fetchIssues();&#10;  }, [fetchIssues]);&#10;&#10;  return (&#10;    &lt;motion.div&#10;      className=&quot;min-h-screen bg-gray-50&quot;&#10;      variants={pageVariants}&#10;      initial=&quot;initial&quot;&#10;      animate=&quot;animate&quot;&#10;      exit=&quot;exit&quot;&#10;    &gt;&#10;      {/* Issues Table */}&#10;      &lt;main className=&quot;p-6&quot;&gt;&#10;        &lt;motion.h2&#10;          className=&quot;text-xl font-bold mb-4&quot;&#10;          initial={{ opacity: 0, y: -20 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          transition={{ duration: 0.6, delay: 0.1 }}&#10;        &gt;&#10;          Admin Dashboard&#10;        &lt;/motion.h2&gt;&#10;        &lt;motion.p&#10;          initial={{ opacity: 0, y: -10 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          transition={{ duration: 0.6, delay: 0.2 }}&#10;        &gt;&#10;          Welcome, Admin! You have access to admin controls.&#10;        &lt;/motion.p&gt;&#10;        &lt;ToastContainer&#10;          position=&quot;top-right&quot;&#10;          autoClose={3000}&#10;          closeOnClick&#10;          pauseOnHover&#10;          draggable&#10;          theme=&quot;dark&quot;&#10;          toastClassName=&quot;toast-body custom-toast-shadow&quot;&#10;          bodyClassName=&quot;text-sm font-medium&quot;&#10;        /&gt;&#10;        &lt;motion.h3&#10;          className=&quot;text-lg font-semibold mb-4&quot;&#10;          initial={{ opacity: 0, y: -10 }}&#10;          animate={{ opacity: 1, y: 0 }}&#10;          transition={{ duration: 0.6, delay: 0.3 }}&#10;        &gt;&#10;          Reported Issues&#10;        &lt;/motion.h3&gt;&#10;&#10;        {issues.length === 0 ? (&#10;          &lt;motion.p&#10;            initial={{ opacity: 0 }}&#10;            animate={{ opacity: 1 }}&#10;            transition={{ duration: 0.6, delay: 0.4 }}&#10;          &gt;&#10;            No issues found.&#10;          &lt;/motion.p&gt;&#10;        ) : (&#10;          &lt;motion.div&#10;            className=&quot;overflow-x-auto&quot;&#10;            initial={{ opacity: 0, y: 20 }}&#10;            animate={{ opacity: 1, y: 0 }}&#10;            transition={{ duration: 0.6, delay: 0.4 }}&#10;          &gt;&#10;            &lt;table className=&quot;min-w-full border border-gray-300 bg-white text-sm rounded-lg overflow-hidden shadow&quot;&gt;&#10;              &lt;thead className=&quot;bg-gray-200 text-gray-700&quot;&gt;&#10;                &lt;motion.tr&#10;                  initial={{ opacity: 0 }}&#10;                  animate={{ opacity: 1 }}&#10;                  transition={{ duration: 0.5, delay: 0.5 }}&#10;                &gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Title&lt;/th&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Description&lt;/th&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Phone&lt;/th&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Email&lt;/th&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Status&lt;/th&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Change Status&lt;/th&gt;&#10;                &lt;/motion.tr&gt;&#10;              &lt;/thead&gt;&#10;              &lt;tbody&gt;&#10;                {issues.map((issue, index) =&gt; (&#10;                  &lt;motion.tr&#10;                    key={issue._id}&#10;                    className=&quot;border-t border-gray-200&quot;&#10;                    variants={rowVariants}&#10;                    initial=&quot;initial&quot;&#10;                    animate=&quot;animate&quot;&#10;                    transition={{ delay: 0.6 + (index * 0.1) }}&#10;                  &gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.title}&lt;/td&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.description}&lt;/td&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.phone}&lt;/td&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.email}&lt;/td&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.status || 'Pending'}&lt;/td&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;&#10;                      &lt;select&#10;                        value={issue.status || 'Pending'}&#10;                        onChange={(e) =&gt; handleStatusChange(issue._id, e.target.value)}&#10;                        className=&quot;border border-gray-300 rounded px-2 py-1&quot;&#10;                      &gt;&#10;                        &lt;option&gt;Pending&lt;/option&gt;&#10;                        &lt;option&gt;In Progress&lt;/option&gt;&#10;                        &lt;option&gt;Resolved&lt;/option&gt;&#10;                        &lt;option&gt;Rejected&lt;/option&gt;&#10;                      &lt;/select&gt;&#10;                    &lt;/td&gt;&#10;                  &lt;/motion.tr&gt;&#10;                ))}&#10;              &lt;/tbody&gt;&#10;            &lt;/table&gt;&#10;          &lt;/motion.div&gt;&#10;        )}&#10;      &lt;/main&gt;&#10;    &lt;/motion.div&gt;&#10;  );&#10;};&#10;&#10;export default AdminDashboard;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>