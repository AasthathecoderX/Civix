<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/COMMIT_MESSAGE.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/COMMIT_MESSAGE.txt" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/App.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/App.jsx" />
              <option name="originalContent" value="import React, { useEffect, useState } from 'react';&#10;import { Routes, Route } from 'react-router-dom';&#10;import { Toaster } from 'react-hot-toast';&#10;import { SignIn, SignUp, useAuth } from '@clerk/clerk-react';&#10;&#10;import Home from './Home';&#10;import Login from './components/Login';&#10;import Signup from './components/Signup';&#10;import PrivateRoute from './components/PrivateRoute';&#10;import RequireAdmin from './components/auth/RequireAdmin';&#10;import AdminDashboard from './components/AdminDashboard';&#10;import Error404 from './components/Error404';&#10;import Navbar from './components/Navbar';&#10;import Footer from './components/Footer';&#10;import ScrollToTop from './components/ScrollToTop';&#10;&#10;import About from './Pages/About';&#10;import Privacy from './Pages/Privacy';&#10;import Terms from './Pages/Terms';&#10;import Contact from './Pages/Contact';&#10;import ReportIssue from './Pages/ReportIssue';&#10;import ServerError from './components/ServerError';&#10;import DownloadAndroid from './Pages/DownloadAndroid';&#10;import DownloadIOS from './Pages/DownloadIOS';&#10;import NewIssue from './Pages/NewIssue';&#10;import IssueDetail from './Pages/IssueDetail';&#10;import UserDashboard from './Pages/UserDashboard';&#10;import CommunityVotingPage from './Pages/CommunityVotingPage';&#10;import Profile from './Pages/Profile';&#10;import Resources from './Pages/Resources';&#10;import MyComplaints from './Pages/MyComplaints';&#10;import CivicEducation from './Pages/CivicEducation';&#10;import CivicSimulator from './Pages/CivicSimulator';&#10;import Contributors from './Pages/Contributors';&#10;import ScrollToTopOnRouteChange from './components/ScrollToTopOnRouteChange';&#10;&#10;const App = () =&gt; {&#10;  const { isSignedIn } = useAuth();&#10;  // Only show Navbar if user is NOT signed in&#10;  return (&#10;    &lt;&gt;&#10;      &lt;ScrollToTop /&gt;&#10;      &lt;ScrollToTopOnRouteChange/&gt;&#10;      &lt;Toaster&#10;        position=&quot;top-right&quot;&#10;        toastOptions={{&#10;          className:&#10;            '!bg-white dark:!bg-gray-800 !text-gray-900 dark:!text-white !border !border-gray-200 dark:!border-gray-700',&#10;          duration: 4000,&#10;          success: {&#10;            iconTheme: { primary: '#10B981', secondary: 'white' },&#10;          },&#10;          error: {&#10;            iconTheme: { primary: '#EF4444', secondary: 'white' },&#10;          },&#10;        }}&#10;      /&gt;&#10;          &#10;      &lt;Navbar/&gt;&#10;&#10;      &lt;main className=&quot;min-h-screen&quot;&gt;&#10;        &lt;Routes&gt;&#10;          {/* Clerk Auth Routes */}&#10;          &lt;Route&#10;            path=&quot;/sign-in/*&quot;&#10;            element={&lt;SignIn routing=&quot;path&quot; path=&quot;/sign-in&quot; redirectUrl=&quot;/&quot; /&gt;}&#10;          /&gt;&#10;          &lt;Route&#10;            path=&quot;/signup/*&quot;&#10;            element={&lt;SignUp routing=&quot;path&quot; path=&quot;/signup&quot; redirectUrl=&quot;/&quot; /&gt;}&#10;          /&gt;&#10;&#10;          {/* Public Routes */}&#10;          &lt;Route path=&quot;/&quot; element={&lt;Home /&gt;} /&gt;&#10;          &lt;Route path=&quot;/about&quot; element={&lt;About /&gt;} /&gt;&#10;          &lt;Route path=&quot;/privacy&quot; element={&lt;Privacy /&gt;} /&gt;&#10;          &lt;Route path=&quot;/terms&quot; element={&lt;Terms /&gt;} /&gt;&#10;          &lt;Route path=&quot;/contact&quot; element={&lt;Contact /&gt;} /&gt;&#10;          &lt;Route path=&quot;/login&quot; element={&lt;Login /&gt;} /&gt;&#10;          &lt;Route path=&quot;/signup&quot; element={&lt;Signup /&gt;} /&gt;&#10;          &lt;Route path=&quot;/report-issue&quot; element={&lt;ReportIssue /&gt;} /&gt;&#10;          &lt;Route path=&quot;/download-android&quot; element={&lt;DownloadAndroid /&gt;} /&gt;&#10;          &lt;Route path=&quot;/download-ios&quot; element={&lt;DownloadIOS /&gt;} /&gt;&#10;          &lt;Route path=&quot;/issues/new&quot; element={&lt;NewIssue /&gt;} /&gt;&#10;          &lt;Route path=&quot;/issues/:id&quot; element={&lt;IssueDetail /&gt;} /&gt;&#10;          &lt;Route path=&quot;/civic-education&quot; element={&lt;CivicEducation /&gt;} /&gt;&#10;          &lt;Route path=&quot;/civic-simulator&quot; element={&lt;CivicSimulator /&gt;} /&gt;&#10;          &lt;Route path=&quot;/community-voting&quot; element={&lt;CommunityVotingPage /&gt;} /&gt;&#10;          &lt;Route path=&quot;/profile&quot; element={&lt;Profile /&gt;} /&gt;&#10;          &lt;Route path=&quot;/resources&quot; element={&lt;Resources /&gt;} /&gt;&#10;          &lt;Route path=&quot;/complaints&quot; element={&lt;MyComplaints /&gt;} /&gt;&#10;          &lt;Route path=&quot;/contributors&quot; element={&lt;Contributors /&gt;} /&gt;&#10;&#10;          {/* Protected Routes */}&#10;          &lt;Route&#10;            path=&quot;/admin&quot;&#10;            element={&#10;              &lt;RequireAdmin&gt;&#10;                &lt;AdminDashboard /&gt;&#10;              &lt;/RequireAdmin&gt;&#10;            }&#10;          /&gt;&#10;          &lt;Route&#10;            path=&quot;/admin/dashboard&quot;&#10;            element={&#10;              &lt;PrivateRoute allowedRoles={['admin']}&gt;&#10;                &lt;AdminDashboard /&gt;&#10;              &lt;/PrivateRoute&gt;&#10;            }&#10;          /&gt;&#10;          &lt;Route&#10;            path=&quot;/home&quot;&#10;            element={&#10;              &lt;PrivateRoute allowedRoles={['user', 'admin']}&gt;&#10;                &lt;Home /&gt;&#10;              &lt;/PrivateRoute&gt;&#10;            }&#10;          /&gt;&#10;          &lt;Route&#10;            path=&quot;/user/dashboard&quot;&#10;            element={&#10;              &lt;PrivateRoute allowedRoles={['user', 'admin']}&gt;&#10;                &lt;UserDashboard /&gt;&#10;              &lt;/PrivateRoute&gt;&#10;            }&#10;          /&gt;&#10;&#10;          {/* Errors */}&#10;          &lt;Route path=&quot;/500&quot; element={&lt;ServerError /&gt;} /&gt;&#10;          &lt;Route path=&quot;*&quot; element={&lt;Error404 /&gt;} /&gt;&#10;        &lt;/Routes&gt;&#10;      &lt;/main&gt;&#10;&#10;      &lt;Footer /&gt;&#10;    &lt;/&gt;&#10;  );&#10;};&#10;&#10;export default App;&#10;// import ChatBot from './components/Chatbot';&#10;&#10;// // Add this to your Layout component's return statement&#10;// function Layout({ children }) {&#10;//   return (&#10;//     &lt;div className=&quot;relative min-h-screen&quot;&gt;&#10;//       {/* Your existing layout code */}&#10;//       {children}&#10;      &#10;//       {/* Add the ChatBot component at the end */}&#10;//       &lt;ChatBot /&gt;&#10;//     &lt;/div&gt;&#10;//   );&#10;// }&#10;" />
              <option name="updatedContent" value="import React, { useEffect, useState } from 'react';&#13;&#10;import { Routes, Route, useLocation } from 'react-router-dom';&#13;&#10;import { Toaster } from 'react-hot-toast';&#13;&#10;import { SignIn, SignUp, useAuth } from '@clerk/clerk-react';&#13;&#10;import { AnimatePresence } from 'framer-motion';&#13;&#10;&#13;&#10;import Home from './Home';&#13;&#10;import Login from './components/Login';&#13;&#10;import Signup from './components/Signup';&#13;&#10;import PrivateRoute from './components/PrivateRoute';&#13;&#10;import RequireAdmin from './components/auth/RequireAdmin';&#13;&#10;import AdminDashboard from './components/AdminDashboard';&#13;&#10;import Error404 from './components/Error404';&#13;&#10;import Navbar from './components/Navbar';&#13;&#10;import Footer from './components/Footer';&#13;&#10;import ScrollToTop from './components/ScrollToTop';&#13;&#10;&#13;&#10;import About from './Pages/About';&#13;&#10;import Privacy from './Pages/Privacy';&#13;&#10;import Terms from './Pages/Terms';&#13;&#10;import Contact from './Pages/Contact';&#13;&#10;import ReportIssue from './Pages/ReportIssue';&#13;&#10;import ServerError from './components/ServerError';&#13;&#10;import DownloadAndroid from './Pages/DownloadAndroid';&#13;&#10;import DownloadIOS from './Pages/DownloadIOS';&#13;&#10;import NewIssue from './Pages/NewIssue';&#13;&#10;import IssueDetail from './Pages/IssueDetail';&#13;&#10;import UserDashboard from './Pages/UserDashboard';&#13;&#10;import CommunityVotingPage from './Pages/CommunityVotingPage';&#13;&#10;import Profile from './Pages/Profile';&#13;&#10;import Resources from './Pages/Resources';&#13;&#10;import MyComplaints from './Pages/MyComplaints';&#13;&#10;import CivicEducation from './Pages/CivicEducation';&#13;&#10;import CivicSimulator from './Pages/CivicSimulator';&#13;&#10;import Contributors from './Pages/Contributors';&#13;&#10;import ScrollToTopOnRouteChange from './components/ScrollToTopOnRouteChange';&#13;&#10;&#13;&#10;const App = () =&gt; {&#13;&#10;  const { isSignedIn } = useAuth();&#13;&#10;  const location = useLocation();&#13;&#10;  &#13;&#10;  return (&#13;&#10;    &lt;&gt;&#13;&#10;      &lt;ScrollToTop /&gt;&#13;&#10;      &lt;ScrollToTopOnRouteChange/&gt;&#13;&#10;      &lt;Toaster&#13;&#10;        position=&quot;top-right&quot;&#13;&#10;        toastOptions={{&#13;&#10;          className:&#13;&#10;            '!bg-white dark:!bg-gray-800 !text-gray-900 dark:!text-white !border !border-gray-200 dark:!border-gray-700',&#13;&#10;          duration: 4000,&#13;&#10;          success: {&#13;&#10;            iconTheme: { primary: '#10B981', secondary: 'white' },&#13;&#10;          },&#13;&#10;          error: {&#13;&#10;            iconTheme: { primary: '#EF4444', secondary: 'white' },&#13;&#10;          },&#13;&#10;        }}&#13;&#10;      /&gt;&#13;&#10;          &#13;&#10;      &lt;Navbar/&gt;&#13;&#10;&#13;&#10;      &lt;main className=&quot;min-h-screen&quot;&gt;&#13;&#10;        &lt;AnimatePresence mode=&quot;wait&quot; initial={false}&gt;&#13;&#10;          &lt;Routes location={location} key={location.pathname}&gt;&#13;&#10;            {/* Clerk Auth Routes */}&#13;&#10;            &lt;Route&#13;&#10;              path=&quot;/sign-in/*&quot;&#13;&#10;              element={&lt;SignIn routing=&quot;path&quot; path=&quot;/sign-in&quot; redirectUrl=&quot;/&quot; /&gt;}&#13;&#10;            /&gt;&#13;&#10;            &lt;Route&#13;&#10;              path=&quot;/signup/*&quot;&#13;&#10;              element={&lt;SignUp routing=&quot;path&quot; path=&quot;/signup&quot; redirectUrl=&quot;/&quot; /&gt;}&#13;&#10;            /&gt;&#13;&#10;&#13;&#10;            {/* Public Routes */}&#13;&#10;            &lt;Route path=&quot;/&quot; element={&lt;Home /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/about&quot; element={&lt;About /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/privacy&quot; element={&lt;Privacy /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/terms&quot; element={&lt;Terms /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/contact&quot; element={&lt;Contact /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/login&quot; element={&lt;Login /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/signup&quot; element={&lt;Signup /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/report-issue&quot; element={&lt;ReportIssue /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/download-android&quot; element={&lt;DownloadAndroid /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/download-ios&quot; element={&lt;DownloadIOS /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/issues/new&quot; element={&lt;NewIssue /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/issues/:id&quot; element={&lt;IssueDetail /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/civic-education&quot; element={&lt;CivicEducation /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/civic-simulator&quot; element={&lt;CivicSimulator /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/community-voting&quot; element={&lt;CommunityVotingPage /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/profile&quot; element={&lt;Profile /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/resources&quot; element={&lt;Resources /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/complaints&quot; element={&lt;MyComplaints /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;/contributors&quot; element={&lt;Contributors /&gt;} /&gt;&#13;&#10;&#13;&#10;            {/* Protected Routes */}&#13;&#10;            &lt;Route&#13;&#10;              path=&quot;/admin&quot;&#13;&#10;              element={&#13;&#10;                &lt;RequireAdmin&gt;&#13;&#10;                  &lt;AdminDashboard /&gt;&#13;&#10;                &lt;/RequireAdmin&gt;&#13;&#10;              }&#13;&#10;            /&gt;&#13;&#10;            &lt;Route&#13;&#10;              path=&quot;/admin/dashboard&quot;&#13;&#10;              element={&#13;&#10;                &lt;PrivateRoute allowedRoles={['admin']}&gt;&#13;&#10;                  &lt;AdminDashboard /&gt;&#13;&#10;                &lt;/PrivateRoute&gt;&#13;&#10;              }&#13;&#10;            /&gt;&#13;&#10;            &lt;Route&#13;&#10;              path=&quot;/home&quot;&#13;&#10;              element={&#13;&#10;                &lt;PrivateRoute allowedRoles={['user', 'admin']}&gt;&#13;&#10;                  &lt;Home /&gt;&#13;&#10;                &lt;/PrivateRoute&gt;&#13;&#10;              }&#13;&#10;            /&gt;&#13;&#10;            &lt;Route&#13;&#10;              path=&quot;/user/dashboard&quot;&#13;&#10;              element={&#13;&#10;                &lt;PrivateRoute allowedRoles={['user', 'admin']}&gt;&#13;&#10;                  &lt;UserDashboard /&gt;&#13;&#10;                &lt;/PrivateRoute&gt;&#13;&#10;              }&#13;&#10;            /&gt;&#13;&#10;&#13;&#10;            {/* Errors */}&#13;&#10;            &lt;Route path=&quot;/500&quot; element={&lt;ServerError /&gt;} /&gt;&#13;&#10;            &lt;Route path=&quot;*&quot; element={&lt;Error404 /&gt;} /&gt;&#13;&#10;          &lt;/Routes&gt;&#13;&#10;        &lt;/AnimatePresence&gt;&#13;&#10;      &lt;/main&gt;&#13;&#10;&#13;&#10;      &lt;Footer /&gt;&#13;&#10;    &lt;/&gt;&#13;&#10;  );&#13;&#10;};&#13;&#10;&#13;&#10;export default App;&#13;&#10;// import ChatBot from './components/Chatbot';&#13;&#10;&#13;&#10;// // Add this to your Layout component's return statement&#13;&#10;// function Layout({ children }) {&#13;&#10;//   return (&#13;&#10;//     &lt;div className=&quot;relative min-h-screen&quot;&gt;&#13;&#10;//       {/* Your existing layout code */}&#13;&#10;//       {children}&#13;&#10;      &#13;&#10;//       {/* Add the ChatBot component at the end */}&#13;&#10;//       &lt;ChatBot /&gt;&#13;&#10;//     &lt;/div&gt;&#13;&#10;//   );&#13;&#10;// }" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Pages/UserDashboard.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Pages/UserDashboard.jsx" />
              <option name="originalContent" value="import React from &quot;react&quot;;&#10;import { useNavigate } from &quot;react-router-dom&quot;;&#10;import { FontAwesomeIcon } from &quot;@fortawesome/react-fontawesome&quot;;&#10;import {&#10;  faFileAlt,&#10;  faListUl,&#10;  faUser,&#10;  faHeadset,&#10;  faChartBar,&#10;  faBookOpen,&#10;} from &quot;@fortawesome/free-solid-svg-icons&quot;;&#10;import &quot;./UserDashboard.css&quot;;&#10;&#10;const UserDashboard = () =&gt; {&#10;  const navigate = useNavigate();&#10;&#10;  return (&#10;    &lt;div className=&quot;dashboard-page&quot;&gt;&#10;      {/* Main Content */}&#10;      &lt;main className=&quot;dashboard-main&quot;&gt;&#10;        &lt;h2 className=&quot;welcome-text&quot;&gt;Welcome, Citizen &lt;/h2&gt;&#10;&#10;        &lt;section className=&quot;dashboard-cards&quot;&gt;&#10;          &lt;DashboardCard&#10;            title=&quot;File a Complaint&quot;&#10;            description=&quot;Submit a new issue with full details.&quot;&#10;            onClick={() =&gt; navigate(&quot;/report-issue&quot;)}&#10;            icon={faFileAlt}&#10;            delay={0}&#10;          /&gt;&#10;          &lt;DashboardCard&#10;            title=&quot;My Complaints&quot;&#10;            description=&quot;Track all complaints you’ve raised.&quot;&#10;            onClick={() =&gt; navigate(&quot;/complaints&quot;)}&#10;            icon={faListUl}&#10;            delay={100}&#10;          /&gt;&#10;          &lt;DashboardCard&#10;            title=&quot;Profile&quot;&#10;            description=&quot;View or edit your profile details.&quot;&#10;            onClick={() =&gt; navigate(&quot;/profile&quot;)}&#10;            icon={faUser}&#10;            delay={200}&#10;          /&gt;&#10;          &lt;DashboardCard&#10;            title=&quot;Support&quot;&#10;            description=&quot;Need help? Contact our support.&quot;&#10;            onClick={() =&gt; navigate(&quot;/contact&quot;)}&#10;            icon={faHeadset}&#10;            delay={300}&#10;          /&gt;&#10;          &lt;DashboardCard&#10;            title=&quot;Community Voting&quot;&#10;            description=&quot;Interact with the community by casting your vote on trending topics, events, and decisions that matter.&quot;&#10;            onClick={() =&gt; navigate(&quot;/community-voting&quot;)}&#10;            icon={faChartBar}&#10;            delay={400}&#10;          /&gt;&#10;          &lt;DashboardCard&#10;            title=&quot;Resources&quot;&#10;            description=&quot;Read FAQs, citizen rights, and more.&quot;&#10;            onClick={() =&gt; navigate(&quot;/resources&quot;)}&#10;            icon={faBookOpen}&#10;            delay={500}&#10;          /&gt;&#10;        &lt;/section&gt;&#10;      &lt;/main&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;const DashboardCard = ({ title, description, onClick, icon, delay }) =&gt; (&#10;  &lt;div&#10;    onClick={onClick}&#10;    tabIndex={0}&#10;    onKeyDown={(e) =&gt; {&#10;      if (e.key === &quot;Enter&quot;) onClick();&#10;    }}&#10;    className=&quot;dashboard-card&quot;&#10;    style={{ animationDelay: `${delay}ms`, animationFillMode: &quot;forwards&quot; }}&#10;  &gt;&#10;    &lt;FontAwesomeIcon icon={icon} className=&quot;card-icon&quot; size=&quot;4x&quot; fixedWidth /&gt;&#10;    &lt;h3 className=&quot;card-title&quot;&gt;{title}&lt;/h3&gt;&#10;    &lt;p className=&quot;card-description&quot;&gt;{description}&lt;/p&gt;&#10;  &lt;/div&gt;&#10;);&#10;&#10;export default UserDashboard;&#10;" />
              <option name="updatedContent" value="import React from &quot;react&quot;;&#13;&#10;import { useNavigate } from &quot;react-router-dom&quot;;&#13;&#10;import { motion } from &quot;framer-motion&quot;;&#13;&#10;import { FontAwesomeIcon } from &quot;@fortawesome/react-fontawesome&quot;;&#13;&#10;import {&#13;&#10;  faFileAlt,&#13;&#10;  faListUl,&#13;&#10;  faUser,&#13;&#10;  faHeadset,&#13;&#10;  faChartBar,&#13;&#10;  faBookOpen,&#13;&#10;} from &quot;@fortawesome/free-solid-svg-icons&quot;;&#13;&#10;import &quot;./UserDashboard.css&quot;;&#13;&#10;&#13;&#10;const UserDashboard = () =&gt; {&#13;&#10;  const navigate = useNavigate();&#13;&#10;&#13;&#10;  // Animation variants for the page container&#13;&#10;  const pageVariants = {&#13;&#10;    initial: { opacity: 0, y: 20 },&#13;&#10;    animate: {&#13;&#10;      opacity: 1,&#13;&#10;      y: 0,&#13;&#10;      transition: {&#13;&#10;        duration: 0.6,&#13;&#10;        ease: &quot;easeOut&quot;,&#13;&#10;        staggerChildren: 0.1,&#13;&#10;      },&#13;&#10;    },&#13;&#10;    exit: {&#13;&#10;      opacity: 0,&#13;&#10;      y: -20,&#13;&#10;      transition: { duration: 0.4 },&#13;&#10;    },&#13;&#10;  };&#13;&#10;&#13;&#10;  // Animation variants for dashboard cards&#13;&#10;  const cardVariants = {&#13;&#10;    initial: { opacity: 0, y: 50, scale: 0.9 },&#13;&#10;    animate: {&#13;&#10;      opacity: 1,&#13;&#10;      y: 0,&#13;&#10;      scale: 1,&#13;&#10;      transition: { duration: 0.5, ease: &quot;easeOut&quot; },&#13;&#10;    },&#13;&#10;    hover: {&#13;&#10;      scale: 1.05,&#13;&#10;      y: -5,&#13;&#10;      transition: { duration: 0.2 },&#13;&#10;    },&#13;&#10;  };&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;motion.div&#13;&#10;      className=&quot;dashboard-page&quot;&#13;&#10;      variants={pageVariants}&#13;&#10;      initial=&quot;initial&quot;&#13;&#10;      animate=&quot;animate&quot;&#13;&#10;      exit=&quot;exit&quot;&#13;&#10;    &gt;&#13;&#10;      {/* Main Content */}&#13;&#10;      &lt;main className=&quot;dashboard-main&quot;&gt;&#13;&#10;        &lt;motion.h2&#13;&#10;          className=&quot;welcome-text&quot;&#13;&#10;          initial={{ opacity: 0, y: -20 }}&#13;&#10;          animate={{ opacity: 1, y: 0 }}&#13;&#10;          transition={{ duration: 0.6, delay: 0.2 }}&#13;&#10;        &gt;&#13;&#10;          Welcome, Citizen &#13;&#10;        &lt;/motion.h2&gt;&#13;&#10;&#13;&#10;        &lt;motion.section className=&quot;dashboard-cards&quot; variants={pageVariants}&gt;&#13;&#10;          &lt;DashboardCard&#13;&#10;            title=&quot;File a Complaint&quot;&#13;&#10;            description=&quot;Submit a new issue with full details.&quot;&#13;&#10;            onClick={() =&gt; navigate(&quot;/report-issue&quot;)}&#13;&#10;            icon={faFileAlt}&#13;&#10;            delay={0}&#13;&#10;            variants={cardVariants}&#13;&#10;          /&gt;&#13;&#10;          &lt;DashboardCard&#13;&#10;            title=&quot;My Complaints&quot;&#13;&#10;            description=&quot;Track all complaints you've raised.&quot;&#13;&#10;            onClick={() =&gt; navigate(&quot;/complaints&quot;)}&#13;&#10;            icon={faListUl}&#13;&#10;            delay={100}&#13;&#10;            variants={cardVariants}&#13;&#10;          /&gt;&#13;&#10;          &lt;DashboardCard&#13;&#10;            title=&quot;Profile&quot;&#13;&#10;            description=&quot;View or edit your profile details.&quot;&#13;&#10;            onClick={() =&gt; navigate(&quot;/profile&quot;)}&#13;&#10;            icon={faUser}&#13;&#10;            delay={200}&#13;&#10;            variants={cardVariants}&#13;&#10;          /&gt;&#13;&#10;          &lt;DashboardCard&#13;&#10;            title=&quot;Support&quot;&#13;&#10;            description=&quot;Need help? Contact our support.&quot;&#13;&#10;            onClick={() =&gt; navigate(&quot;/contact&quot;)}&#13;&#10;            icon={faHeadset}&#13;&#10;            delay={300}&#13;&#10;            variants={cardVariants}&#13;&#10;          /&gt;&#13;&#10;          &lt;DashboardCard&#13;&#10;            title=&quot;Community Voting&quot;&#13;&#10;            description=&quot;Interact with the community by casting your vote on trending topics, events, and decisions that matter.&quot;&#13;&#10;            onClick={() =&gt; navigate(&quot;/community-voting&quot;)}&#13;&#10;            icon={faChartBar}&#13;&#10;            delay={400}&#13;&#10;            variants={cardVariants}&#13;&#10;          /&gt;&#13;&#10;          &lt;DashboardCard&#13;&#10;            title=&quot;Resources&quot;&#13;&#10;            description=&quot;Read FAQs, citizen rights, and more.&quot;&#13;&#10;            onClick={() =&gt; navigate(&quot;/resources&quot;)}&#13;&#10;            icon={faBookOpen}&#13;&#10;            delay={500}&#13;&#10;            variants={cardVariants}&#13;&#10;          /&gt;&#13;&#10;        &lt;/motion.section&gt;&#13;&#10;      &lt;/main&gt;&#13;&#10;    &lt;/motion.div&gt;&#13;&#10;  );&#13;&#10;};&#13;&#10;&#13;&#10;const DashboardCard = ({ title, description, onClick, icon, delay, variants }) =&gt; (&#13;&#10;  &lt;motion.div&#13;&#10;    onClick={onClick}&#13;&#10;    tabIndex={0}&#13;&#10;    onKeyDown={(e) =&gt; {&#13;&#10;      if (e.key === &quot;Enter&quot;) onClick();&#13;&#10;    }}&#13;&#10;    className=&quot;dashboard-card&quot;&#13;&#10;    variants={variants}&#13;&#10;    initial=&quot;initial&quot;&#13;&#10;    animate=&quot;animate&quot;&#13;&#10;    whileHover=&quot;hover&quot;&#13;&#10;    transition={{ delay: delay / 1000 }}&#13;&#10;  &gt;&#13;&#10;    &lt;FontAwesomeIcon icon={icon} className=&quot;card-icon&quot; size=&quot;4x&quot; fixedWidth /&gt;&#13;&#10;    &lt;h3 className=&quot;card-title&quot;&gt;{title}&lt;/h3&gt;&#13;&#10;    &lt;p className=&quot;card-description&quot;&gt;{description}&lt;/p&gt;&#13;&#10;  &lt;/motion.div&gt;&#13;&#10;);&#13;&#10;&#13;&#10;export default UserDashboard;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/AdminDashboard.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/AdminDashboard.jsx" />
              <option name="originalContent" value="import React, { useEffect, useState } from 'react';&#10;import { useNavigate } from 'react-router-dom';&#10;import { toast ,ToastContainer} from 'react-toastify';&#10;const AdminDashboard = () =&gt; {&#10;  const navigate = useNavigate();&#10;  const [issues, setIssues] = useState([]);&#10;&#10;  // Fetch all reported issues&#10;  const fetchIssues = React.useCallback(async () =&gt; {&#10;    try {&#10;      const token = localStorage.getItem('token');&#10;      const res = await fetch('http://localhost:5001/api/issues', {&#10;        headers: {&#10;          Authorization: `Bearer ${token}`,&#10;        },&#10;      });&#10;&#10;      if (!res.ok) {&#10;        throw new Error('Unauthorized or failed to fetch');&#10;      }&#10;&#10;      const data = await res.json();&#10;      setIssues(data);&#10;    } catch (error) {&#10;      console.error('Error fetching issues:', error);&#10;      alert('Failed to fetch issues. Please login again.');&#10;      navigate('/login');&#10;    }&#10;  }, [navigate]);&#10;&#10;  // Update issue status&#10;  const handleStatusChange = async (id, status) =&gt; {&#10;    try {&#10;      const token = localStorage.getItem('token');&#10;      const res = await fetch(`http://localhost:5001/api/issues/${id}/status`, {&#10;        method: 'PATCH',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;          Authorization: `Bearer ${token}`,&#10;        },&#10;        body: JSON.stringify({ status }),&#10;      });&#10;&#10;      if (!res.ok) {&#10;        throw new Error('Failed to update status');&#10;      }&#10;&#10;      // Refresh issue list&#10;      fetchIssues();&#10;    } catch (error) {&#10;      console.error('Error updating status:', error);&#10;      alert('Could not update status.');&#10;    }&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    fetchIssues();&#10;  }, [fetchIssues]);&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      {/* Issues Table */}&#10;      &lt;main className=&quot;p-6&quot;&gt;&#10;        &lt;h2 className=&quot;text-xl font-bold mb-4&quot;&gt;Admin Dashboard&lt;/h2&gt;&#10;        &lt;p&gt;Welcome, Admin! You have access to admin controls.&lt;/p&gt;&#10;        &lt;ToastContainer&#10;        position=&quot;top-right&quot;&#10;        autoClose={3000}&#10;        closeOnClick&#10;        pauseOnHover&#10;        draggable&#10;        theme=&quot;dark&quot;&#10;        toastClassName=&quot;toast-body custom-toast-shadow&quot;&#10;        bodyClassName=&quot;text-sm font-medium&quot;&#10;      /&gt;&#10;        &lt;h3 className=&quot;text-lg font-semibold mb-4&quot;&gt;Reported Issues&lt;/h3&gt;&#10;&#10;        {issues.length === 0 ? (&#10;          &lt;p&gt;No issues found.&lt;/p&gt;&#10;        ) : (&#10;          &lt;div className=&quot;overflow-x-auto&quot;&gt;&#10;            &lt;table className=&quot;min-w-full border border-gray-300 bg-white text-sm rounded-lg overflow-hidden shadow&quot;&gt;&#10;              &lt;thead className=&quot;bg-gray-200 text-gray-700&quot;&gt;&#10;                &lt;tr&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Title&lt;/th&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Description&lt;/th&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Phone&lt;/th&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Email&lt;/th&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Status&lt;/th&gt;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Change Status&lt;/th&gt;&#10;                &lt;/tr&gt;&#10;              &lt;/thead&gt;&#10;              &lt;tbody&gt;&#10;                {issues.map((issue) =&gt; (&#10;                  &lt;tr key={issue._id} className=&quot;border-t border-gray-200&quot;&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.title}&lt;/td&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.description}&lt;/td&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.phone}&lt;/td&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.email}&lt;/td&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.status || 'Pending'}&lt;/td&gt;&#10;                    &lt;td className=&quot;p-3&quot;&gt;&#10;                      &lt;select&#10;                        value={issue.status || 'Pending'}&#10;                        onChange={(e) =&gt; handleStatusChange(issue._id, e.target.value)}&#10;                        className=&quot;border border-gray-300 rounded px-2 py-1&quot;&#10;                      &gt;&#10;                        &lt;option&gt;Pending&lt;/option&gt;&#10;                        &lt;option&gt;In Progress&lt;/option&gt;&#10;                        &lt;option&gt;Resolved&lt;/option&gt;&#10;                        &lt;option&gt;Rejected&lt;/option&gt;&#10;                      &lt;/select&gt;&#10;                    &lt;/td&gt;&#10;                  &lt;/tr&gt;&#10;                ))}&#10;              &lt;/tbody&gt;&#10;            &lt;/table&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/main&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default AdminDashboard;&#10;" />
              <option name="updatedContent" value="import React, { useEffect, useState } from 'react';&#13;&#10;import { useNavigate } from 'react-router-dom';&#13;&#10;import { motion } from 'framer-motion';&#13;&#10;import { toast, ToastContainer } from 'react-toastify';&#13;&#10;&#13;&#10;const AdminDashboard = () =&gt; {&#13;&#10;  const navigate = useNavigate();&#13;&#10;  const [issues, setIssues] = useState([]);&#13;&#10;&#13;&#10;  // Animation variants for the page container&#13;&#10;  const pageVariants = {&#13;&#10;    initial: { opacity: 0, y: 20 },&#13;&#10;    animate: { &#13;&#10;      opacity: 1, &#13;&#10;      y: 0,&#13;&#10;      transition: { &#13;&#10;        duration: 0.6, &#13;&#10;        ease: &quot;easeOut&quot;,&#13;&#10;        staggerChildren: 0.1&#13;&#10;      }&#13;&#10;    },&#13;&#10;    exit: { &#13;&#10;      opacity: 0, &#13;&#10;      y: -20,&#13;&#10;      transition: { duration: 0.4 }&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  // Animation variants for table rows&#13;&#10;  const rowVariants = {&#13;&#10;    initial: { opacity: 0, x: -20 },&#13;&#10;    animate: { &#13;&#10;      opacity: 1, &#13;&#10;      x: 0,&#13;&#10;      transition: { duration: 0.4 }&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  // Fetch all reported issues&#13;&#10;  const fetchIssues = React.useCallback(async () =&gt; {&#13;&#10;    try {&#13;&#10;      const token = localStorage.getItem('token');&#13;&#10;      const res = await fetch('http://localhost:5001/api/issues', {&#13;&#10;        headers: {&#13;&#10;          Authorization: `Bearer ${token}`,&#13;&#10;        },&#13;&#10;      });&#13;&#10;&#13;&#10;      if (!res.ok) {&#13;&#10;        throw new Error('Unauthorized or failed to fetch');&#13;&#10;      }&#13;&#10;&#13;&#10;      const data = await res.json();&#13;&#10;      setIssues(data);&#13;&#10;    } catch (error) {&#13;&#10;      console.error('Error fetching issues:', error);&#13;&#10;      alert('Failed to fetch issues. Please login again.');&#13;&#10;      navigate('/login');&#13;&#10;    }&#13;&#10;  }, [navigate]);&#13;&#10;&#13;&#10;  // Update issue status&#13;&#10;  const handleStatusChange = async (id, status) =&gt; {&#13;&#10;    try {&#13;&#10;      const token = localStorage.getItem('token');&#13;&#10;      const res = await fetch(`http://localhost:5001/api/issues/${id}/status`, {&#13;&#10;        method: 'PATCH',&#13;&#10;        headers: {&#13;&#10;          'Content-Type': 'application/json',&#13;&#10;          Authorization: `Bearer ${token}`,&#13;&#10;        },&#13;&#10;        body: JSON.stringify({ status }),&#13;&#10;      });&#13;&#10;&#13;&#10;      if (!res.ok) {&#13;&#10;        throw new Error('Failed to update status');&#13;&#10;      }&#13;&#10;&#13;&#10;      // Refresh issue list&#13;&#10;      fetchIssues();&#13;&#10;    } catch (error) {&#13;&#10;      console.error('Error updating status:', error);&#13;&#10;      alert('Could not update status.');&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    fetchIssues();&#13;&#10;  }, [fetchIssues]);&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;motion.div &#13;&#10;      className=&quot;min-h-screen bg-gray-50&quot;&#13;&#10;      variants={pageVariants}&#13;&#10;      initial=&quot;initial&quot;&#13;&#10;      animate=&quot;animate&quot;&#13;&#10;      exit=&quot;exit&quot;&#13;&#10;    &gt;&#13;&#10;      {/* Issues Table */}&#13;&#10;      &lt;main className=&quot;p-6&quot;&gt;&#13;&#10;        &lt;motion.h2 &#13;&#10;          className=&quot;text-xl font-bold mb-4&quot;&#13;&#10;          initial={{ opacity: 0, y: -20 }}&#13;&#10;          animate={{ opacity: 1, y: 0 }}&#13;&#10;          transition={{ duration: 0.6, delay: 0.1 }}&#13;&#10;        &gt;&#13;&#10;          Admin Dashboard&#13;&#10;        &lt;/motion.h2&gt;&#13;&#10;        &lt;motion.p&#13;&#10;          initial={{ opacity: 0, y: -10 }}&#13;&#10;          animate={{ opacity: 1, y: 0 }}&#13;&#10;          transition={{ duration: 0.6, delay: 0.2 }}&#13;&#10;        &gt;&#13;&#10;          Welcome, Admin! You have access to admin controls.&#13;&#10;        &lt;/motion.p&gt;&#13;&#10;        &lt;ToastContainer&#13;&#10;          position=&quot;top-right&quot;&#13;&#10;          autoClose={3000}&#13;&#10;          closeOnClick&#13;&#10;          pauseOnHover&#13;&#10;          draggable&#13;&#10;          theme=&quot;dark&quot;&#13;&#10;          toastClassName=&quot;toast-body custom-toast-shadow&quot;&#13;&#10;          bodyClassName=&quot;text-sm font-medium&quot;&#13;&#10;        /&gt;&#13;&#10;        &lt;motion.h3 &#13;&#10;          className=&quot;text-lg font-semibold mb-4&quot;&#13;&#10;          initial={{ opacity: 0, y: -10 }}&#13;&#10;          animate={{ opacity: 1, y: 0 }}&#13;&#10;          transition={{ duration: 0.6, delay: 0.3 }}&#13;&#10;        &gt;&#13;&#10;          Reported Issues&#13;&#10;        &lt;/motion.h3&gt;&#13;&#10;&#13;&#10;        {issues.length === 0 ? (&#13;&#10;          &lt;motion.p&#13;&#10;            initial={{ opacity: 0 }}&#13;&#10;            animate={{ opacity: 1 }}&#13;&#10;            transition={{ duration: 0.6, delay: 0.4 }}&#13;&#10;          &gt;&#13;&#10;            No issues found.&#13;&#10;          &lt;/motion.p&gt;&#13;&#10;        ) : (&#13;&#10;          &lt;motion.div &#13;&#10;            className=&quot;overflow-x-auto&quot;&#13;&#10;            initial={{ opacity: 0, y: 20 }}&#13;&#10;            animate={{ opacity: 1, y: 0 }}&#13;&#10;            transition={{ duration: 0.6, delay: 0.4 }}&#13;&#10;          &gt;&#13;&#10;            &lt;table className=&quot;min-w-full border border-gray-300 bg-white text-sm rounded-lg overflow-hidden shadow&quot;&gt;&#13;&#10;              &lt;thead className=&quot;bg-gray-200 text-gray-700&quot;&gt;&#13;&#10;                &lt;motion.tr&#13;&#10;                  initial={{ opacity: 0 }}&#13;&#10;                  animate={{ opacity: 1 }}&#13;&#10;                  transition={{ duration: 0.5, delay: 0.5 }}&#13;&#10;                &gt;&#13;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Title&lt;/th&gt;&#13;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Description&lt;/th&gt;&#13;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Phone&lt;/th&gt;&#13;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Email&lt;/th&gt;&#13;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Status&lt;/th&gt;&#13;&#10;                  &lt;th className=&quot;p-3&quot;&gt;Change Status&lt;/th&gt;&#13;&#10;                &lt;/motion.tr&gt;&#13;&#10;              &lt;/thead&gt;&#13;&#10;              &lt;tbody&gt;&#13;&#10;                {issues.map((issue, index) =&gt; (&#13;&#10;                  &lt;motion.tr &#13;&#10;                    key={issue._id} &#13;&#10;                    className=&quot;border-t border-gray-200&quot;&#13;&#10;                    variants={rowVariants}&#13;&#10;                    initial=&quot;initial&quot;&#13;&#10;                    animate=&quot;animate&quot;&#13;&#10;                    transition={{ delay: 0.6 + (index * 0.1) }}&#13;&#10;                  &gt;&#13;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.title}&lt;/td&gt;&#13;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.description}&lt;/td&gt;&#13;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.phone}&lt;/td&gt;&#13;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.email}&lt;/td&gt;&#13;&#10;                    &lt;td className=&quot;p-3&quot;&gt;{issue.status || 'Pending'}&lt;/td&gt;&#13;&#10;                    &lt;td className=&quot;p-3&quot;&gt;&#13;&#10;                      &lt;select&#13;&#10;                        value={issue.status || 'Pending'}&#13;&#10;                        onChange={(e) =&gt; handleStatusChange(issue._id, e.target.value)}&#13;&#10;                        className=&quot;border border-gray-300 rounded px-2 py-1&quot;&#13;&#10;                      &gt;&#13;&#10;                        &lt;option&gt;Pending&lt;/option&gt;&#13;&#10;                        &lt;option&gt;In Progress&lt;/option&gt;&#13;&#10;                        &lt;option&gt;Resolved&lt;/option&gt;&#13;&#10;                        &lt;option&gt;Rejected&lt;/option&gt;&#13;&#10;                      &lt;/select&gt;&#13;&#10;                    &lt;/td&gt;&#13;&#10;                  &lt;/motion.tr&gt;&#13;&#10;                ))}&#13;&#10;              &lt;/tbody&gt;&#13;&#10;            &lt;/table&gt;&#13;&#10;          &lt;/motion.div&gt;&#13;&#10;        )}&#13;&#10;      &lt;/main&gt;&#13;&#10;    &lt;/motion.div&gt;&#13;&#10;  );&#13;&#10;};&#13;&#10;&#13;&#10;export default AdminDashboard;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/components/Navbar.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/components/Navbar.jsx" />
              <option name="originalContent" value="// import React from 'react';&#10;// import { useNavigate } from 'react-router-dom';&#10;// import Switch from '../DarkModeToggle';&#10;&#10;// const Navbar = () =&gt; {&#10;//   const navigate = useNavigate();&#10;&#10;//   const scrollToTop = () =&gt; {&#10;//     window.scrollTo({ top: 0, behavior: 'smooth' });&#10;//   };&#10;&#10;//   return (&#10;//     &lt;header&#10;//       className=&quot;sticky top-0 z-50 w-full border-b bg-white/95 dark:bg-[hsla(240,5%,15%,0.8)] backdrop-blur&quot;&#10;//       style={{&#10;//         '--tw-bg-opacity': '0.95',&#10;//         backgroundColor: 'rgba(255, 255, 255, 0.95)'&#10;//       }}&#10;//     &gt;&#10;//       &lt;div className=&quot;container flex h-14 items-center justify-between&quot;&gt;&#10;//         &lt;button onClick={scrollToTop} className=&quot;flex items-center gap-2 hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;//           &lt;svg&#10;//             xmlns=&quot;http://www.w3.org/2000/svg&quot;&#10;//             width=&quot;24&quot;&#10;//             height=&quot;24&quot;&#10;//             viewBox=&quot;0 0 24 24&quot;&#10;//             fill=&quot;none&quot;&#10;//             stroke=&quot;currentColor&quot;&#10;//             strokeWidth=&quot;2&quot;&#10;//             strokeLinecap=&quot;round&quot;&#10;//             strokeLinejoin=&quot;round&quot;&#10;//             className=&quot;h-6 w-6 text-emerald-500&quot;&#10;//           &gt;&#10;//             &lt;path d=&quot;M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z&quot; /&gt;&#10;//             &lt;circle cx=&quot;12&quot; cy=&quot;10&quot; r=&quot;3&quot; /&gt;&#10;//           &lt;/svg&gt;&#10;//           &lt;span className=&quot;text-xl font-bold&quot;&gt;Civix&lt;/span&gt;&#10;//         &lt;/button&gt;&#10;//         &lt;nav className=&quot;hidden md:flex gap-6&quot;&gt;&#10;//           &lt;a href=&quot;#features&quot; className=&quot;text-sm font-medium hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;//             Features&#10;//           &lt;/a&gt;&#10;//           &lt;a href=&quot;#how-it-works&quot; className=&quot;text-sm font-medium hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;//             How It Works&#10;//           &lt;/a&gt;&#10;//           &lt;a href=&quot;#testimonials&quot; className=&quot;text-sm font-medium hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;//             Testimonials&#10;//           &lt;/a&gt;&#10;//           &lt;a href=&quot;#faq&quot; className=&quot;text-sm font-medium hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;//             FAQ&#10;//           &lt;/a&gt;&#10;//         &lt;/nav&gt;&#10;//         &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#10;//           &lt;Switch /&gt;&#10;//           &lt;button&#10;//             onClick={() =&gt; navigate('/login')}&#10;//             className=&quot;inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2&quot;&#10;//           &gt;&#10;//             Login&#10;//           &lt;/button&gt;&#10;//           &lt;button&#10;//             onClick={() =&gt; navigate('/signup')}&#10;//             className=&quot;inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-emerald-500 text-primary-foreground hover:bg-emerald-500/90 h-9 px-4 py-2&quot;&#10;//           &gt;&#10;//             Get Started&#10;//           &lt;/button&gt;&#10;//         &lt;/div&gt;&#10;//       &lt;/div&gt;&#10;//     &lt;/header&gt;&#10;//   );&#10;// };&#10;&#10;// export default Navbar;&#10;&#10;&#10;import React, { useState, useEffect } from 'react';&#10;import { useNavigate, Link, href } from 'react-router-dom';&#10;import Switch from '../DarkModeToggle';&#10;import { jwtDecode } from 'jwt-decode';&#10;import { useAuth } from '@clerk/clerk-react';&#10;&#10;const Navbar = () =&gt; {&#10;  const navigate = useNavigate();&#10;  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);&#10;  const { isSignedIn, signOut } = useAuth();&#10;&#10;  // Close menu on route change or navigation&#10;  const handleNav = (cb) =&gt; {&#10;    setMobileMenuOpen(false);&#10;    if (cb) cb();&#10;  };&#10;&#10;  // Handle logout&#10;  const handleLogout = async () =&gt; {&#10;    if (signOut) {&#10;      await signOut(); // Clerk: clears session and data&#10;    }&#10;    localStorage.removeItem(&quot;token&quot;);&#10;    window.dispatchEvent(new Event(&quot;storage-update&quot;));&#10;    navigate(&quot;/&quot;);&#10;  };&#10;&#10;  // Close menu on Escape key&#10;  useEffect(() =&gt; {&#10;    if (!mobileMenuOpen) return;&#10;    const onKeyDown = (e) =&gt; {&#10;      if (e.key === 'Escape') setMobileMenuOpen(false);&#10;    };&#10;    window.addEventListener('keydown', onKeyDown);&#10;    return () =&gt; window.removeEventListener('keydown', onKeyDown);&#10;  }, [mobileMenuOpen]);&#10;&#10;  // Close menu when clicking outside&#10;  useEffect(() =&gt; {&#10;    if (!mobileMenuOpen) return;&#10;    const onClick = (e) =&gt; {&#10;      if (e.target.closest('#mobile-nav-panel') || e.target.closest('#mobile-nav-toggle')) return;&#10;      setMobileMenuOpen(false);&#10;    };&#10;    document.addEventListener('mousedown', onClick);&#10;    return () =&gt; document.removeEventListener('mousedown', onClick);&#10;  }, [mobileMenuOpen]);&#10;&#10;  // ✅ Check if logged-in user is admin&#10;  const token = localStorage.getItem('token');&#10;  let isAdmin = false;&#10;&#10;  try {&#10;    if (token) {&#10;      const decoded = jwtDecode(token);&#10;      isAdmin = decoded.role === 'admin';&#10;    }&#10;  } catch (err) {&#10;    console.error('Invalid token');&#10;  }&#10;&#10;  const navLinks = [&#10;    {&#10;      title: &quot;Civic Education &amp; Rights&quot;,&#10;      href: &quot;/civic-education&quot;&#10;    },&#10;    {&#10;      title: &quot;About&quot;,&#10;      href: &quot;/about&quot;&#10;    },&#10;    {&#10;      title: &quot;Contact Us&quot;,&#10;      href: &quot;/contact&quot;&#10;    },&#10;    {&#10;      title: &quot;Our contributors&quot;,&#10;      href: &quot;/contributors&quot;&#10;    },&#10;&#10;  ]&#10;&#10;  return (&#10;    &lt;header className=&quot;sticky top-0 z-50 w-full border-b bg-white/95 dark:bg-[hsla(240,5%,15%,0.8)] backdrop-blur&quot;&gt;&#10;      &lt;div className=&quot;container flex h-14 items-center justify-between&quot;&gt;&#10;        &lt;button onClick={() =&gt; { setMobileMenuOpen(false); navigate('/'); }} className=&quot;flex items-center gap-2 hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;          &lt;svg&#10;            xmlns=&quot;http://www.w3.org/2000/svg&quot;&#10;            width=&quot;24&quot;&#10;            height=&quot;24&quot;&#10;            viewBox=&quot;0 0 24 24&quot;&#10;            fill=&quot;none&quot;&#10;            stroke=&quot;currentColor&quot;&#10;            strokeWidth=&quot;2&quot;&#10;            strokeLinecap=&quot;round&quot;&#10;            strokeLinejoin=&quot;round&quot;&#10;            className=&quot;h-6 w-6 text-emerald-500&quot;&#10;          &gt;&#10;            &lt;path d=&quot;M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z&quot; /&gt;&#10;            &lt;circle cx=&quot;12&quot; cy=&quot;10&quot; r=&quot;3&quot; /&gt;&#10;          &lt;/svg&gt;&#10;          &lt;span id=&quot;logo&quot; className=&quot;text-xl font-bold&quot; onClick={() =&gt; window.scrollTo({ top: 0, behavior: 'smooth' })}&gt;Civix&lt;/span&gt;&#10;        &lt;/button&gt;&#10;&#10;        {/* Desktop nav - only show on large screens */}&#10;        &lt;nav className=&quot;hidden lg:flex gap-6&quot;&gt;&#10;          {navLinks.map((navItem) =&gt; (&#10;            &lt;Link key={navItem.title}&#10;              to={navItem.href}&#10;              className='text-sm font-medium hover:text-emerald-500 transition-colors duration-300'&#10;            &gt;&#10;              {navItem.title}&#10;            &lt;/Link&gt;&#10;          ))}&#10;        &lt;/nav&gt;&#10;&#10;&#10;        {/* Hamburger for mobile and tablet */}&#10;        &lt;button&#10;          id=&quot;mobile-nav-toggle&quot;&#10;          className=&quot;lg:hidden flex items-center justify-center p-2 rounded focus:outline-none focus:ring-2 focus:ring-emerald-500&quot;&#10;          aria-label={mobileMenuOpen ? 'Close navigation menu' : 'Open navigation menu'}&#10;          aria-expanded={mobileMenuOpen}&#10;          onClick={() =&gt; setMobileMenuOpen((open) =&gt; !open)}&#10;        &gt;&#10;          &lt;svg className=&quot;h-7 w-7 text-emerald-600&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; strokeWidth=&quot;2&quot; viewBox=&quot;0 0 24 24&quot;&gt;&#10;            {mobileMenuOpen ? (&#10;              &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 18L18 6M6 6l12 12&quot; /&gt;&#10;            ) : (&#10;              &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M4 8h16M4 16h16&quot; /&gt;&#10;            )}&#10;          &lt;/svg&gt;&#10;        &lt;/button&gt;&#10;&#10;        &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#10;          &lt;Switch /&gt;&#10;          {/* Dashboard link for authenticated users */}&#10;          {(isSignedIn || token) &amp;&amp; (&#10;            &lt;button&#10;              onClick={() =&gt; navigate(isAdmin ? '/admin' : '/user/dashboard')}&#10;              className=&quot;hidden lg:inline-flex items-center justify-center rounded-md text-sm font-medium border border-emerald-500 text-emerald-600 hover:bg-emerald-50 dark:hover:bg-emerald-900/20 h-9 px-4 py-2&quot;&#10;            &gt;&#10;              Dashboard&#10;            &lt;/button&gt;&#10;          )}&#10;&#10;          {isAdmin &amp;&amp; (&#10;            &lt;button&#10;              onClick={() =&gt; navigate('/admin')}&#10;              className=&quot;hidden lg:inline-flex items-center justify-center rounded-md text-sm font-medium border border-emerald-500 text-emerald-600 hover:bg-emerald-50 h-9 px-4 py-2&quot;&#10;            &gt;&#10;              Admin Dashboard&#10;            &lt;/button&gt;&#10;          )}&#10;          &#10;          {/* Show logout button when authenticated, login/signup when not */}&#10;          {isSignedIn || token ? (&#10;            &lt;button&#10;              onClick={handleLogout}&#10;              className=&quot;hidden lg:inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-emerald-500 text-white hover:bg-emerald-600 h-9 px-4 py-2&quot;&#10;            &gt;&#10;              Logout&#10;            &lt;/button&gt;&#10;          ) : (&#10;            &lt;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; navigate('/login')}&#10;                className=&quot;hidden lg:inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2&quot;&#10;              &gt;&#10;                Login&#10;              &lt;/button&gt;&#10;              &lt;button&#10;                onClick={() =&gt; navigate('/signup')}&#10;                className=&quot;hidden lg:inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors text-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-emerald-500 text-primary-foreground hover:bg-emerald-600 h-9 px-4 py-2&quot;&#10;              &gt;&#10;                Get Started&#10;              &lt;/button&gt;&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Mobile/Tablet menu overlay and panel */}&#10;      {mobileMenuOpen &amp;&amp; (&#10;        &lt;&gt;&#10;          {/* Dark overlay */}&#10;          &lt;div&#10;            className=&quot;lg:hidden fixed inset-0 bg-black/50 backdrop-blur-sm animate-fade-in&quot;&#10;            onClick={() =&gt; setMobileMenuOpen(false)}&#10;            aria-hidden=&quot;true&quot;&#10;          /&gt;&#10;          {/* Panel */}&#10;          &lt;div className=&quot;lg:hidden fixed inset-x-0 top-0 z-[100] animate-fade-slide-up&quot;&gt;&#10;            &lt;nav id=&quot;mobile-nav-panel&quot; className=&quot;relative flex flex-col items-center w-full h-[100vh] bg-white dark:bg-[#18181b] pt-24 gap-6 shadow-xl&quot;&gt;&#10;              &lt;button&#10;                className=&quot;absolute top-6 right-6 text-3xl text-emerald-600 focus:outline-none&quot;&#10;                aria-label=&quot;Close navigation menu&quot;&#10;                onClick={() =&gt; setMobileMenuOpen(false)}&#10;              &gt;&#10;                &amp;times;&#10;              &lt;/button&gt;&#10;&#10;&#10;              {navLinks.map((navItem) =&gt; (&#10;                &lt;Link key={navItem.title}&#10;                  to={navItem.href}&#10;                  onClick={() =&gt; handleNav()}&#10;                  className='text-lg font-medium hover:text-emerald-500 transition-colors duration-300'&#10;                &gt;&#10;                  {navItem.title}&#10;                &lt;/Link&gt;&#10;              ))}&#10;&#10;              {/* Dashboard link for authenticated users in mobile menu */}&#10;              {(isSignedIn || token) &amp;&amp; (&#10;                &lt;button&#10;                  onClick={() =&gt; handleNav(() =&gt; navigate(isAdmin ? '/admin' : '/user/dashboard'))}&#10;                  className=&quot;w-11/12 rounded-md text-base font-medium border border-emerald-500 text-emerald-600 hover:bg-emerald-50 dark:hover:bg-emerald-900/20 h-11 px-4 py-2&quot;&#10;                &gt;&#10;                  Dashboard&#10;                &lt;/button&gt;&#10;              )}&#10;&#10;              {isAdmin &amp;&amp; (&#10;                &lt;button&#10;                  onClick={() =&gt; handleNav(() =&gt; navigate('/admin'))}&#10;                  className=&quot;w-11/12 rounded-md text-base font-medium border border-emerald-500 text-emerald-600 hover:bg-emerald-50 h-11 px-4 py-2&quot;&#10;                &gt;&#10;                  Admin Dashboard&#10;                &lt;/button&gt;&#10;              )}&#10;              &#10;              {/* Show logout button when authenticated, login/signup when not */}&#10;              {isSignedIn || token ? (&#10;                &lt;button&#10;                  onClick={() =&gt; handleNav(handleLogout)}&#10;                  className=&quot;w-11/12 rounded-md text-base font-medium bg-emerald-500 text-white hover:bg-emerald-600 h-11 px-4 py-2&quot;&#10;                &gt;&#10;                  Logout&#10;                &lt;/button&gt;&#10;              ) : (&#10;                &lt;&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; handleNav(() =&gt; navigate('/login'))}&#10;                    className=&quot;w-11/12 rounded-md text-base font-medium border border-input hover:bg-accent hover:text-accent-foreground h-11 px-4 py-2&quot;&#10;                  &gt;&#10;                    Login&#10;                  &lt;/button&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; handleNav(() =&gt; navigate('/signup'))}&#10;                    className=&quot;w-11/12 rounded-md text-base font-medium bg-emerald-500 text-white hover:bg-emerald-600 h-11 px-4 py-2&quot;&#10;                  &gt;&#10;                    Get Started&#10;                  &lt;/button&gt;&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/nav&gt;&#10;          &lt;/div&gt;&#10;        &lt;/&gt;&#10;      )}&#10;    &lt;/header&gt;&#10;  );&#10;};&#10;&#10;export default Navbar;&#10;&#10;&#10;&#10;&#10;// import React from 'react';&#10;// import { useNavigate } from 'react-router-dom';&#10;// import Switch from '../DarkModeToggle';&#10;&#10;// const Navbar = () =&gt; {&#10;//   const navigate = useNavigate();&#10;&#10;//   const scrollToTop = () =&gt; {&#10;//     window.scrollTo({ top: 0, behavior: 'smooth' });&#10;//   };&#10;&#10;//   return (&#10;//     &lt;header&#10;//       className=&quot;sticky top-0 z-50 w-full border-b bg-white/95 dark:bg-[hsla(240,5%,15%,0.8)] backdrop-blur&quot;&#10;//       style={{&#10;//         '--tw-bg-opacity': '0.95',&#10;//         backgroundColor: 'rgba(255, 255, 255, 0.95)'&#10;//       }}&#10;//     &gt;&#10;//       &lt;div className=&quot;container flex h-14 items-center justify-between&quot;&gt;&#10;//         &lt;button onClick={scrollToTop} className=&quot;flex items-center gap-2 hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;//           &lt;svg&#10;//             xmlns=&quot;http://www.w3.org/2000/svg&quot;&#10;//             width=&quot;24&quot;&#10;//             height=&quot;24&quot;&#10;//             viewBox=&quot;0 0 24 24&quot;&#10;//             fill=&quot;none&quot;&#10;//             stroke=&quot;currentColor&quot;&#10;//             strokeWidth=&quot;2&quot;&#10;//             strokeLinecap=&quot;round&quot;&#10;//             strokeLinejoin=&quot;round&quot;&#10;//             className=&quot;h-6 w-6 text-emerald-500&quot;&#10;//           &gt;&#10;//             &lt;path d=&quot;M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z&quot; /&gt;&#10;//             &lt;circle cx=&quot;12&quot; cy=&quot;10&quot; r=&quot;3&quot; /&gt;&#10;//           &lt;/svg&gt;&#10;//           &lt;span className=&quot;text-xl font-bold&quot;&gt;Civix&lt;/span&gt;&#10;//         &lt;/button&gt;&#10;//         &lt;nav className=&quot;hidden md:flex gap-6&quot;&gt;&#10;//           &lt;a href=&quot;#features&quot; className=&quot;text-sm font-medium hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;//             Features&#10;//           &lt;/a&gt;&#10;//           &lt;a href=&quot;#how-it-works&quot; className=&quot;text-sm font-medium hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;//             How It Works&#10;//           &lt;/a&gt;&#10;//           &lt;a href=&quot;#testimonials&quot; className=&quot;text-sm font-medium hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;//             Testimonials&#10;//           &lt;/a&gt;&#10;//           &lt;a href=&quot;#faq&quot; className=&quot;text-sm font-medium hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;//             FAQ&#10;//           &lt;/a&gt;&#10;//         &lt;/nav&gt;&#10;//         &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#10;//           &lt;Switch /&gt;&#10;//           &lt;button&#10;//             onClick={() =&gt; navigate('/login')}&#10;//             className=&quot;inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2&quot;&#10;//           &gt;&#10;//             Login&#10;//           &lt;/button&gt;&#10;//           &lt;button&#10;//             onClick={() =&gt; navigate('/signup')}&#10;//             className=&quot;inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-emerald-500 text-primary-foreground hover:bg-emerald-500/90 h-9 px-4 py-2&quot;&#10;//           &gt;&#10;//             Get Started&#10;//           &lt;/button&gt;&#10;//         &lt;/div&gt;&#10;//       &lt;/div&gt;&#10;//     &lt;/header&gt;&#10;//   );&#10;// };&#10;&#10;// export default Navbar;&#10;" />
              <option name="updatedContent" value="// import React from 'react';&#10;// import { useNavigate } from 'react-router-dom';&#10;// import Switch from '../DarkModeToggle';&#10;&#10;// const Navbar = () =&gt; {&#10;//   const navigate = useNavigate();&#10;&#10;//   const scrollToTop = () =&gt; {&#10;//     window.scrollTo({ top: 0, behavior: 'smooth' });&#10;//   };&#10;&#10;//   return (&#10;//     &lt;header&#10;//       className=&quot;sticky top-0 z-50 w-full border-b bg-white/95 dark:bg-[hsla(240,5%,15%,0.8)] backdrop-blur&quot;&#10;//       style={{&#10;//         '--tw-bg-opacity': '0.95',&#10;//         backgroundColor: 'rgba(255, 255, 255, 0.95)'&#10;//       }}&#10;//     &gt;&#10;//       &lt;div className=&quot;container flex h-14 items-center justify-between&quot;&gt;&#10;//         &lt;button onClick={scrollToTop} className=&quot;flex items-center gap-2 hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;//           &lt;svg&#10;//             xmlns=&quot;http://www.w3.org/2000/svg&quot;&#10;//             width=&quot;24&quot;&#10;//             height=&quot;24&quot;&#10;//             viewBox=&quot;0 0 24 24&quot;&#10;//             fill=&quot;none&quot;&#10;//             stroke=&quot;currentColor&quot;&#10;//             strokeWidth=&quot;2&quot;&#10;//             strokeLinecap=&quot;round&quot;&#10;//             strokeLinejoin=&quot;round&quot;&#10;//             className=&quot;h-6 w-6 text-emerald-500&quot;&#10;//           &gt;&#10;//             &lt;path d=&quot;M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z&quot; /&gt;&#10;//             &lt;circle cx=&quot;12&quot; cy=&quot;10&quot; r=&quot;3&quot; /&gt;&#10;//           &lt;/svg&gt;&#10;//           &lt;span className=&quot;text-xl font-bold&quot;&gt;Civix&lt;/span&gt;&#10;//         &lt;/button&gt;&#10;//         &lt;nav className=&quot;hidden md:flex gap-6&quot;&gt;&#10;//           &lt;a href=&quot;#features&quot; className=&quot;text-sm font-medium hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;//             Features&#10;//           &lt;/a&gt;&#10;//           &lt;a href=&quot;#how-it-works&quot; className=&quot;text-sm font-medium hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;//             How It Works&#10;//           &lt;/a&gt;&#10;//           &lt;a href=&quot;#testimonials&quot; className=&quot;text-sm font-medium hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;//             Testimonials&#10;//           &lt;/a&gt;&#10;//           &lt;a href=&quot;#faq&quot; className=&quot;text-sm font-medium hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;//             FAQ&#10;//           &lt;/a&gt;&#10;//         &lt;/nav&gt;&#10;//         &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#10;//           &lt;Switch /&gt;&#10;//           &lt;button&#10;//             onClick={() =&gt; navigate('/login')}&#10;//             className=&quot;inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2&quot;&#10;//           &gt;&#10;//             Login&#10;//           &lt;/button&gt;&#10;//           &lt;button&#10;//             onClick={() =&gt; navigate('/signup')}&#10;//             className=&quot;inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-emerald-500 text-primary-foreground hover:bg-emerald-500/90 h-9 px-4 py-2&quot;&#10;//           &gt;&#10;//             Get Started&#10;//           &lt;/button&gt;&#10;//         &lt;/div&gt;&#10;//       &lt;/div&gt;&#10;//     &lt;/header&gt;&#10;//   );&#10;// };&#10;&#10;// export default Navbar;&#10;&#10;&#10;import React, { useState, useEffect } from 'react';&#10;import { useNavigate, Link } from 'react-router-dom';&#10;import Switch from '../DarkModeToggle';&#10;import { jwtDecode } from 'jwt-decode';&#10;import { useAuth } from '@clerk/clerk-react';&#10;&#10;const Navbar = () =&gt; {&#10;  const navigate = useNavigate();&#10;  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);&#10;  const { isSignedIn, signOut } = useAuth();&#10;&#10;  // Close menu on route change or navigation&#10;  const handleNav = (cb) =&gt; {&#10;    setMobileMenuOpen(false);&#10;    if (cb) cb();&#10;  };&#10;&#10;  // Handle logout&#10;  const handleLogout = async () =&gt; {&#10;    if (signOut) {&#10;      await signOut(); // Clerk: clears session and data&#10;    }&#10;    localStorage.removeItem(&quot;token&quot;);&#10;    window.dispatchEvent(new Event(&quot;storage-update&quot;));&#10;    navigate(&quot;/&quot;);&#10;  };&#10;&#10;  // Close menu on Escape key&#10;  useEffect(() =&gt; {&#10;    if (!mobileMenuOpen) return;&#10;    const onKeyDown = (e) =&gt; {&#10;      if (e.key === 'Escape') setMobileMenuOpen(false);&#10;    };&#10;    window.addEventListener('keydown', onKeyDown);&#10;    return () =&gt; window.removeEventListener('keydown', onKeyDown);&#10;  }, [mobileMenuOpen]);&#10;&#10;  // Close menu when clicking outside&#10;  useEffect(() =&gt; {&#10;    if (!mobileMenuOpen) return;&#10;    const onClick = (e) =&gt; {&#10;      if (e.target.closest('#mobile-nav-panel') || e.target.closest('#mobile-nav-toggle')) return;&#10;      setMobileMenuOpen(false);&#10;    };&#10;    document.addEventListener('mousedown', onClick);&#10;    return () =&gt; document.removeEventListener('mousedown', onClick);&#10;  }, [mobileMenuOpen]);&#10;&#10;  // ✅ Check if logged-in user is admin&#10;  const token = localStorage.getItem('token');&#10;  let isAdmin = false;&#10;&#10;  try {&#10;    if (token) {&#10;      const decoded = jwtDecode(token);&#10;      isAdmin = decoded.role === 'admin';&#10;    }&#10;  } catch (err) {&#10;    console.error('Invalid token');&#10;  }&#10;&#10;  const navLinks = [&#10;    {&#10;      title: &quot;Civic Education &amp; Rights&quot;,&#10;      href: &quot;/civic-education&quot;&#10;    },&#10;    {&#10;      title: &quot;About&quot;,&#10;      href: &quot;/about&quot;&#10;    },&#10;    {&#10;      title: &quot;Contact Us&quot;,&#10;      href: &quot;/contact&quot;&#10;    },&#10;    {&#10;      title: &quot;Our contributors&quot;,&#10;      href: &quot;/contributors&quot;&#10;    },&#10;&#10;  ]&#10;&#10;  return (&#10;    &lt;header className=&quot;sticky top-0 z-50 w-full border-b bg-white/95 dark:bg-[hsla(240,5%,15%,0.8)] backdrop-blur&quot;&gt;&#10;      &lt;div className=&quot;container flex h-14 items-center justify-between&quot;&gt;&#10;        &lt;button onClick={() =&gt; { setMobileMenuOpen(false); navigate('/'); }} className=&quot;flex items-center gap-2 hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;          &lt;svg&#10;            xmlns=&quot;http://www.w3.org/2000/svg&quot;&#10;            width=&quot;24&quot;&#10;            height=&quot;24&quot;&#10;            viewBox=&quot;0 0 24 24&quot;&#10;            fill=&quot;none&quot;&#10;            stroke=&quot;currentColor&quot;&#10;            strokeWidth=&quot;2&quot;&#10;            strokeLinecap=&quot;round&quot;&#10;            strokeLinejoin=&quot;round&quot;&#10;            className=&quot;h-6 w-6 text-emerald-500&quot;&#10;          &gt;&#10;            &lt;path d=&quot;M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z&quot; /&gt;&#10;            &lt;circle cx=&quot;12&quot; cy=&quot;10&quot; r=&quot;3&quot; /&gt;&#10;          &lt;/svg&gt;&#10;          &lt;span id=&quot;logo&quot; className=&quot;text-xl font-bold&quot; onClick={() =&gt; window.scrollTo({ top: 0, behavior: 'smooth' })}&gt;Civix&lt;/span&gt;&#10;        &lt;/button&gt;&#10;&#10;        {/* Desktop nav - only show on large screens */}&#10;        &lt;nav className=&quot;hidden lg:flex gap-6&quot;&gt;&#10;          {navLinks.map((navItem) =&gt; (&#10;            &lt;Link key={navItem.title}&#10;              to={navItem.href}&#10;              className='text-sm font-medium hover:text-emerald-500 transition-colors duration-300'&#10;            &gt;&#10;              {navItem.title}&#10;            &lt;/Link&gt;&#10;          ))}&#10;        &lt;/nav&gt;&#10;&#10;&#10;        {/* Hamburger for mobile and tablet */}&#10;        &lt;button&#10;          id=&quot;mobile-nav-toggle&quot;&#10;          className=&quot;lg:hidden flex items-center justify-center p-2 rounded focus:outline-none focus:ring-2 focus:ring-emerald-500&quot;&#10;          aria-label={mobileMenuOpen ? 'Close navigation menu' : 'Open navigation menu'}&#10;          aria-expanded={mobileMenuOpen}&#10;          onClick={() =&gt; setMobileMenuOpen((open) =&gt; !open)}&#10;        &gt;&#10;          &lt;svg className=&quot;h-7 w-7 text-emerald-600&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; strokeWidth=&quot;2&quot; viewBox=&quot;0 0 24 24&quot;&gt;&#10;            {mobileMenuOpen ? (&#10;              &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M6 18L18 6M6 6l12 12&quot; /&gt;&#10;            ) : (&#10;              &lt;path strokeLinecap=&quot;round&quot; strokeLinejoin=&quot;round&quot; d=&quot;M4 8h16M4 16h16&quot; /&gt;&#10;            )}&#10;          &lt;/svg&gt;&#10;        &lt;/button&gt;&#10;&#10;        &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#10;          &lt;Switch /&gt;&#10;          {/* Dashboard link for authenticated users */}&#10;          {(isSignedIn || token) &amp;&amp; (&#10;            &lt;button&#10;              onClick={() =&gt; navigate(isAdmin ? '/admin' : '/user/dashboard')}&#10;              className=&quot;hidden lg:inline-flex items-center justify-center rounded-md text-sm font-medium border border-emerald-500 text-emerald-600 hover:bg-emerald-50 dark:hover:bg-emerald-900/20 h-9 px-4 py-2&quot;&#10;            &gt;&#10;              Dashboard&#10;            &lt;/button&gt;&#10;          )}&#10;&#10;          {isAdmin &amp;&amp; (&#10;            &lt;button&#10;              onClick={() =&gt; navigate('/admin')}&#10;              className=&quot;hidden lg:inline-flex items-center justify-center rounded-md text-sm font-medium border border-emerald-500 text-emerald-600 hover:bg-emerald-50 h-9 px-4 py-2&quot;&#10;            &gt;&#10;              Admin Dashboard&#10;            &lt;/button&gt;&#10;          )}&#10;          &#10;          {/* Show logout button when authenticated, login/signup when not */}&#10;          {isSignedIn || token ? (&#10;            &lt;button&#10;              onClick={handleLogout}&#10;              className=&quot;hidden lg:inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-emerald-500 text-white hover:bg-emerald-600 h-9 px-4 py-2&quot;&#10;            &gt;&#10;              Logout&#10;            &lt;/button&gt;&#10;          ) : (&#10;            &lt;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; navigate('/login')}&#10;                className=&quot;hidden lg:inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2&quot;&#10;              &gt;&#10;                Login&#10;              &lt;/button&gt;&#10;              &lt;button&#10;                onClick={() =&gt; navigate('/signup')}&#10;                className=&quot;hidden lg:inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors text-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-emerald-500 text-primary-foreground hover:bg-emerald-600 h-9 px-4 py-2&quot;&#10;              &gt;&#10;                Get Started&#10;              &lt;/button&gt;&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Mobile/Tablet menu overlay and panel */}&#10;      {mobileMenuOpen &amp;&amp; (&#10;        &lt;&gt;&#10;          {/* Dark overlay */}&#10;          &lt;div&#10;            className=&quot;lg:hidden fixed inset-0 bg-black/50 backdrop-blur-sm animate-fade-in&quot;&#10;            onClick={() =&gt; setMobileMenuOpen(false)}&#10;            aria-hidden=&quot;true&quot;&#10;          /&gt;&#10;          {/* Panel */}&#10;          &lt;div className=&quot;lg:hidden fixed inset-x-0 top-0 z-[100] animate-fade-slide-up&quot;&gt;&#10;            &lt;nav id=&quot;mobile-nav-panel&quot; className=&quot;relative flex flex-col items-center w-full h-[100vh] bg-white dark:bg-[#18181b] pt-24 gap-6 shadow-xl&quot;&gt;&#10;              &lt;button&#10;                className=&quot;absolute top-6 right-6 text-3xl text-emerald-600 focus:outline-none&quot;&#10;                aria-label=&quot;Close navigation menu&quot;&#10;                onClick={() =&gt; setMobileMenuOpen(false)}&#10;              &gt;&#10;                &amp;times;&#10;              &lt;/button&gt;&#10;&#10;&#10;              {navLinks.map((navItem) =&gt; (&#10;                &lt;Link key={navItem.title}&#10;                  to={navItem.href}&#10;                  onClick={() =&gt; handleNav()}&#10;                  className='text-lg font-medium hover:text-emerald-500 transition-colors duration-300'&#10;                &gt;&#10;                  {navItem.title}&#10;                &lt;/Link&gt;&#10;              ))}&#10;&#10;              {/* Dashboard link for authenticated users in mobile menu */}&#10;              {(isSignedIn || token) &amp;&amp; (&#10;                &lt;button&#10;                  onClick={() =&gt; handleNav(() =&gt; navigate(isAdmin ? '/admin' : '/user/dashboard'))}&#10;                  className=&quot;w-11/12 rounded-md text-base font-medium border border-emerald-500 text-emerald-600 hover:bg-emerald-50 dark:hover:bg-emerald-900/20 h-11 px-4 py-2&quot;&#10;                &gt;&#10;                  Dashboard&#10;                &lt;/button&gt;&#10;              )}&#10;&#10;              {isAdmin &amp;&amp; (&#10;                &lt;button&#10;                  onClick={() =&gt; handleNav(() =&gt; navigate('/admin'))}&#10;                  className=&quot;w-11/12 rounded-md text-base font-medium border border-emerald-500 text-emerald-600 hover:bg-emerald-50 h-11 px-4 py-2&quot;&#10;                &gt;&#10;                  Admin Dashboard&#10;                &lt;/button&gt;&#10;              )}&#10;              &#10;              {/* Show logout button when authenticated, login/signup when not */}&#10;              {isSignedIn || token ? (&#10;                &lt;button&#10;                  onClick={() =&gt; handleNav(handleLogout)}&#10;                  className=&quot;w-11/12 rounded-md text-base font-medium bg-emerald-500 text-white hover:bg-emerald-600 h-11 px-4 py-2&quot;&#10;                &gt;&#10;                  Logout&#10;                &lt;/button&gt;&#10;              ) : (&#10;                &lt;&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; handleNav(() =&gt; navigate('/login'))}&#10;                    className=&quot;w-11/12 rounded-md text-base font-medium border border-input hover:bg-accent hover:text-accent-foreground h-11 px-4 py-2&quot;&#10;                  &gt;&#10;                    Login&#10;                  &lt;/button&gt;&#10;                  &lt;button&#10;                    onClick={() =&gt; handleNav(() =&gt; navigate('/signup'))}&#10;                    className=&quot;w-11/12 rounded-md text-base font-medium bg-emerald-500 text-white hover:bg-emerald-600 h-11 px-4 py-2&quot;&#10;                  &gt;&#10;                    Get Started&#10;                  &lt;/button&gt;&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/nav&gt;&#10;          &lt;/div&gt;&#10;        &lt;/&gt;&#10;      )}&#10;    &lt;/header&gt;&#10;  );&#10;};&#10;&#10;export default Navbar;&#10;&#10;&#10;&#10;&#10;// import React from 'react';&#10;// import { useNavigate } from 'react-router-dom';&#10;// import Switch from '../DarkModeToggle';&#10;&#10;// const Navbar = () =&gt; {&#10;//   const navigate = useNavigate();&#10;&#10;//   const scrollToTop = () =&gt; {&#10;//     window.scrollTo({ top: 0, behavior: 'smooth' });&#10;//   };&#10;&#10;//   return (&#10;//     &lt;header&#10;//       className=&quot;sticky top-0 z-50 w-full border-b bg-white/95 dark:bg-[hsla(240,5%,15%,0.8)] backdrop-blur&quot;&#10;//       style={{&#10;//         '--tw-bg-opacity': '0.95',&#10;//         backgroundColor: 'rgba(255, 255, 255, 0.95)'&#10;//       }}&#10;//     &gt;&#10;//       &lt;div className=&quot;container flex h-14 items-center justify-between&quot;&gt;&#10;//         &lt;button onClick={scrollToTop} className=&quot;flex items-center gap-2 hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;//           &lt;svg&#10;//             xmlns=&quot;http://www.w3.org/2000/svg&quot;&#10;//             width=&quot;24&quot;&#10;//             height=&quot;24&quot;&#10;//             viewBox=&quot;0 0 24 24&quot;&#10;//             fill=&quot;none&quot;&#10;//             stroke=&quot;currentColor&quot;&#10;//             strokeWidth=&quot;2&quot;&#10;//             strokeLinecap=&quot;round&quot;&#10;//             strokeLinejoin=&quot;round&quot;&#10;//             className=&quot;h-6 w-6 text-emerald-500&quot;&#10;//           &gt;&#10;//             &lt;path d=&quot;M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z&quot; /&gt;&#10;//             &lt;circle cx=&quot;12&quot; cy=&quot;10&quot; r=&quot;3&quot; /&gt;&#10;//           &lt;/svg&gt;&#10;//           &lt;span className=&quot;text-xl font-bold&quot;&gt;Civix&lt;/span&gt;&#10;//         &lt;/button&gt;&#10;//         &lt;nav className=&quot;hidden md:flex gap-6&quot;&gt;&#10;//           &lt;a href=&quot;#features&quot; className=&quot;text-sm font-medium hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;//             Features&#10;//           &lt;/a&gt;&#10;//           &lt;a href=&quot;#how-it-works&quot; className=&quot;text-sm font-medium hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;//             How It Works&#10;//           &lt;/a&gt;&#10;//           &lt;a href=&quot;#testimonials&quot; className=&quot;text-sm font-medium hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;//             Testimonials&#10;//           &lt;/a&gt;&#10;//           &lt;a href=&quot;#faq&quot; className=&quot;text-sm font-medium hover:text-emerald-500 transition-colors duration-300&quot;&gt;&#10;//             FAQ&#10;//           &lt;/a&gt;&#10;//         &lt;/nav&gt;&#10;//         &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#10;//           &lt;Switch /&gt;&#10;//           &lt;button&#10;//             onClick={() =&gt; navigate('/login')}&#10;//             className=&quot;inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2&quot;&#10;//           &gt;&#10;//             Login&#10;//           &lt;/button&gt;&#10;//           &lt;button&#10;//             onClick={() =&gt; navigate('/signup')}&#10;//             className=&quot;inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-emerald-500 text-primary-foreground hover:bg-emerald-500/90 h-9 px-4 py-2&quot;&#10;//           &gt;&#10;//             Get Started&#10;//           &lt;/button&gt;&#10;//         &lt;/div&gt;&#10;//       &lt;/div&gt;&#10;//     &lt;/header&gt;&#10;//   );&#10;// };&#10;&#10;// export default Navbar;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>